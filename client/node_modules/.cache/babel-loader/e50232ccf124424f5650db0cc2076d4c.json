{"ast":null,"code":"import jwt_decode from \"jwt-decode\";\nimport Constants from \"../lib/constants\";\nimport CookieUtil from \"./cookieUtil\"; // Utility function to check if the input is a Date object\n\nconst isDate = date => date instanceof Date; // Utility function to format a date into a time string\n\n\nconst getTimeFromDate = date => {\n  const dateObj = isDate(date) ? date : new Date(date);\n  let hour = dateObj.getHours();\n  const minute = dateObj.getMinutes();\n  const meridian = hour >= 12 ? \"pm\" : \"am\";\n  hour = hour % 12 || 12; // Convert 24-hour time to 12-hour time\n\n  const formattedMinute = minute < 10 ? `0${minute}` : minute;\n  return `${hour}:${formattedMinute} ${meridian}`;\n}; // Utility function to get the user ID from the JWT token\n\n\nconst getUserId = () => {\n  const token = CookieUtil.getCookie(Constants.ACCESS_PROPERTY);\n\n  if (token) {\n    try {\n      const decodedToken = jwt_decode(token);\n      return decodedToken.userId || \"\";\n    } catch (error) {\n      console.error(\"Failed to decode token:\", error);\n      return \"\";\n    }\n  }\n\n  return \"\";\n}; // Utility function to format chat users\n\n\nconst getFormatedChatUser = (chatUsers, onlineUserList) => {\n  const userId = getUserId();\n\n  if (!Array.isArray(chatUsers)) {\n    console.warn(\"Expected chatUsers to be an array, but got:\", chatUsers);\n    return [];\n  }\n\n  return chatUsers.reduce((acumulator, item) => {\n    if (item.type === \"DM\" || item.type === \"SELF\") {\n      var _item$member, _item$member$find, _item$member2;\n\n      const newResult = {\n        roomId: item.roomId,\n        isOnline: onlineUserList === null || onlineUserList === void 0 ? void 0 : onlineUserList.includes((_item$member = item.member) === null || _item$member === void 0 ? void 0 : (_item$member$find = _item$member.find(user => user.id !== userId)) === null || _item$member$find === void 0 ? void 0 : _item$member$find.id)\n      };\n      const member = ((_item$member2 = item.member) === null || _item$member2 === void 0 ? void 0 : _item$member2.find(user => user.id !== userId)) || (item.type === \"SELF\" ? item.member[0] : null);\n\n      if (member) {\n        newResult.name = `${member.first_name} ${member.last_name}`;\n        newResult.image = member.image;\n        newResult.id = member.id;\n        acumulator.push(newResult);\n      }\n    }\n\n    return acumulator;\n  }, []);\n}; // Utility function to get the active chat ID from the route match\n\n\nconst getActiveChatId = match => {\n  var _match$params;\n\n  return (match === null || match === void 0 ? void 0 : (_match$params = match.params) === null || _match$params === void 0 ? void 0 : _match$params.chatId) || null;\n}; // Exporting utility functions\n\n\nconst CommonUtil = {\n  getTimeFromDate,\n  getUserId,\n  getFormatedChatUser,\n  getActiveChatId\n};\nexport default CommonUtil;","map":{"version":3,"sources":["/home/ts/Downloads/django-chat-main/client/src/util/commonUtil.js"],"names":["jwt_decode","Constants","CookieUtil","isDate","date","Date","getTimeFromDate","dateObj","hour","getHours","minute","getMinutes","meridian","formattedMinute","getUserId","token","getCookie","ACCESS_PROPERTY","decodedToken","userId","error","console","getFormatedChatUser","chatUsers","onlineUserList","Array","isArray","warn","reduce","acumulator","item","type","newResult","roomId","isOnline","includes","member","find","user","id","name","first_name","last_name","image","push","getActiveChatId","match","params","chatId","CommonUtil"],"mappings":"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","sourcesContent":["import jwt_decode from \"jwt-decode\";\nimport Constants from \"../lib/constants\";\nimport CookieUtil from \"./cookieUtil\";\n\n// Utility function to check if the input is a Date object\nconst isDate = (date) => date instanceof Date;\n\n// Utility function to format a date into a time string\nconst getTimeFromDate = (date) => {\n  const dateObj = isDate(date) ? date : new Date(date);\n  let hour = dateObj.getHours();\n  const minute = dateObj.getMinutes();\n  const meridian = hour >= 12 ? \"pm\" : \"am\";\n\n  hour = hour % 12 || 12; // Convert 24-hour time to 12-hour time\n  const formattedMinute = minute < 10 ? `0${minute}` : minute;\n\n  return `${hour}:${formattedMinute} ${meridian}`;\n};\n\n// Utility function to get the user ID from the JWT token\nconst getUserId = () => {\n  const token = CookieUtil.getCookie(Constants.ACCESS_PROPERTY);\n  if (token) {\n    try {\n      const decodedToken = jwt_decode(token);\n      return decodedToken.userId || \"\";\n    } catch (error) {\n      console.error(\"Failed to decode token:\", error);\n      return \"\";\n    }\n  }\n  return \"\";\n};\n\n// Utility function to format chat users\nconst getFormatedChatUser = (chatUsers, onlineUserList) => {\n  const userId = getUserId();\n  \n  if (!Array.isArray(chatUsers)) {\n    console.warn(\"Expected chatUsers to be an array, but got:\", chatUsers);\n    return [];\n  }\n\n  return chatUsers.reduce((acumulator, item) => {\n    if (item.type === \"DM\" || item.type === \"SELF\") {\n      const newResult = {\n        roomId: item.roomId,\n        isOnline: onlineUserList?.includes(item.member?.find(user => user.id !== userId)?.id),\n      };\n\n      const member = item.member?.find(user => user.id !== userId) || (item.type === \"SELF\" ? item.member[0] : null);\n\n      if (member) {\n        newResult.name = `${member.first_name} ${member.last_name}`;\n        newResult.image = member.image;\n        newResult.id = member.id;\n        acumulator.push(newResult);\n      }\n    }\n    return acumulator;\n  }, []);\n};\n\n// Utility function to get the active chat ID from the route match\nconst getActiveChatId = (match) => match?.params?.chatId || null;\n\n// Exporting utility functions\nconst CommonUtil = {\n  getTimeFromDate,\n  getUserId,\n  getFormatedChatUser,\n  getActiveChatId,\n};\n\nexport default CommonUtil;\n"]},"metadata":{},"sourceType":"module"}