{"ast":null,"code":"import * as React from 'react';\nvar isCheckBoxInput = element => element.type === 'checkbox';\nvar isDateObject = data => data instanceof Date;\nvar isNullOrUndefined = value => value == null;\nconst isObjectType = value => typeof value === 'object';\nvar isObject = value => !isNullOrUndefined(value) && !Array.isArray(value) && isObjectType(value) && !isDateObject(value);\nvar getControllerValue = event => isObject(event) && event.target ? isCheckBoxInput(event.target) ? event.target.checked : event.target.value : event;\nvar getNodeParentName = name => name.substring(0, name.search(/.\\d/)) || name;\nvar isNameInFieldArray = (names, name) => [...names].some(current => getNodeParentName(name) === current);\nvar compact = value => value.filter(Boolean);\nvar isUndefined = val => val === undefined;\nvar get = (obj, path, defaultValue) => {\n  if (isObject(obj) && path) {\n    const result = compact(path.split(/[,[\\].]+?/)).reduce((result, key) => isNullOrUndefined(result) ? result : result[key], obj);\n    return isUndefined(result) || result === obj ? isUndefined(obj[path]) ? defaultValue : obj[path] : result;\n  }\n  return undefined;\n};\nconst EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change'\n};\nconst VALIDATION_MODE = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all'\n};\nconst INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate'\n};\nvar omit = (source, key) => {\n  const copy = Object.assign({}, source);\n  delete copy[key];\n  return copy;\n};\nconst HookFormContext = React.createContext(null);\nconst useFormContext = () => React.useContext(HookFormContext);\nconst FormProvider = props => React.createElement(HookFormContext.Provider, {\n  value: omit(props, 'children')\n}, props.children);\nvar getProxyFormState = (formState, _proxyFormState, localProxyFormState, isRoot = true) => {\n  function createGetter(prop) {\n    return () => {\n      if (prop in formState) {\n        if (_proxyFormState[prop] !== VALIDATION_MODE.all) {\n          _proxyFormState[prop] = !isRoot || VALIDATION_MODE.all;\n        }\n        localProxyFormState && (localProxyFormState[prop] = true);\n        return formState[prop];\n      }\n      return undefined;\n    };\n  }\n  const result = {};\n  for (const key in formState) {\n    Object.defineProperty(result, key, {\n      get: createGetter(key)\n    });\n  }\n  return result;\n};\nvar isEmptyObject = value => isObject(value) && !Object.keys(value).length;\nvar shouldRenderFormState = (formStateData, _proxyFormState, isRoot) => {\n  const formState = omit(formStateData, 'name');\n  return isEmptyObject(formState) || Object.keys(formState).length >= Object.keys(_proxyFormState).length || Object.keys(formState).find(key => _proxyFormState[key] === (!isRoot || VALIDATION_MODE.all));\n};\nvar convertToArrayPayload = value => Array.isArray(value) ? value : [value];\nvar shouldSubscribeByName = (name, signalName) => !name || !signalName || name === signalName || convertToArrayPayload(name).some(currentName => currentName && (currentName.startsWith(signalName) || signalName.startsWith(currentName)));\nconst tearDown = _subscription => {\n  if (_subscription.current) {\n    _subscription.current.unsubscribe();\n    _subscription.current = undefined;\n  }\n};\nconst updateSubscriptionProps = ({\n  _subscription,\n  _props\n}) => {\n  if (_props.current.disabled) {\n    tearDown(_subscription);\n  } else if (!_subscription.current) {\n    _subscription.current = _props.current.subject.subscribe({\n      next: _props.current.callback\n    });\n  }\n};\nfunction useSubscribe(props) {\n  const _subscription = React.useRef();\n  const _props = React.useRef(props);\n  _props.current = props;\n  updateSubscriptionProps({\n    _subscription,\n    _props\n  });\n  React.useEffect(() => {\n    updateSubscriptionProps({\n      _subscription,\n      _props\n    });\n    return () => tearDown(_subscription);\n  }, []);\n}\nfunction useFormState(props) {\n  const methods = useFormContext();\n  const {\n    control = methods.control,\n    disabled,\n    name\n  } = props || {};\n  const [formState, updateFormState] = React.useState(control._formState);\n  const _localProxyFormState = React.useRef({\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false\n  });\n  const _name = React.useRef(name);\n  _name.current = name;\n  useSubscribe({\n    disabled,\n    callback: formState => shouldSubscribeByName(_name.current, formState.name) && shouldRenderFormState(formState, _localProxyFormState.current) && updateFormState(Object.assign(Object.assign({}, control._formState), formState)),\n    subject: control._subjects.state\n  });\n  return getProxyFormState(formState, control._proxyFormState, _localProxyFormState.current, false);\n}\nvar isString = value => typeof value === 'string';\nfunction generateWatchOutput(names, _names, formValues, isGlobal) {\n  const isArray = Array.isArray(names);\n  if (isString(names)) {\n    isGlobal && _names.watch.add(names);\n    return get(formValues, names);\n  }\n  if (isArray) {\n    return names.map(fieldName => (isGlobal && _names.watch.add(fieldName), get(formValues, fieldName)));\n  }\n  isGlobal && (_names.watchAll = true);\n  return formValues;\n}\nfunction useWatch(props) {\n  const methods = useFormContext();\n  const {\n    control = methods.control,\n    name,\n    defaultValue,\n    disabled\n  } = props || {};\n  const _name = React.useRef(name);\n  _name.current = name;\n  useSubscribe({\n    disabled,\n    subject: control._subjects.watch,\n    callback: formState => {\n      if (shouldSubscribeByName(_name.current, formState.name)) {\n        const fieldValues = generateWatchOutput(_name.current, control._names, formState.values || control._formValues);\n        updateValue(isUndefined(_name.current) ? Object.assign({}, fieldValues) : Array.isArray(fieldValues) ? [...fieldValues] : fieldValues);\n      }\n    }\n  });\n  const [value, updateValue] = React.useState(isUndefined(defaultValue) ? control._getWatch(name) : defaultValue);\n  React.useEffect(() => {\n    control._removeUnmounted();\n  });\n  return value;\n}\nfunction useController(props) {\n  const methods = useFormContext();\n  const {\n    name,\n    control = methods.control,\n    shouldUnregister\n  } = props;\n  const value = useWatch({\n    control,\n    name,\n    defaultValue: get(control._formValues, name, get(control._defaultValues, name, props.defaultValue))\n  });\n  const formState = useFormState({\n    control,\n    name\n  });\n  const _name = React.useRef(name);\n  _name.current = name;\n  const registerProps = control.register(name, Object.assign(Object.assign({}, props.rules), {\n    value\n  }));\n  React.useEffect(() => {\n    const updateMounted = (name, value) => {\n      const field = get(control._fields, name);\n      if (field) {\n        field._f.mount = value;\n      }\n    };\n    updateMounted(name, true);\n    return () => {\n      const _shouldUnregisterField = control._options.shouldUnregister || shouldUnregister;\n      if (isNameInFieldArray(control._names.array, name) ? _shouldUnregisterField && !control._stateFlags.action : _shouldUnregisterField) {\n        control.unregister(name, {\n          keepDefaultValue: true\n        });\n      } else {\n        updateMounted(name, false);\n      }\n    };\n  }, [name, control, shouldUnregister]);\n  return {\n    field: {\n      onChange: event => {\n        registerProps.onChange({\n          target: {\n            value: getControllerValue(event),\n            name: name\n          },\n          type: EVENTS.CHANGE\n        });\n      },\n      onBlur: () => {\n        registerProps.onBlur({\n          target: {\n            value,\n            name: name\n          },\n          type: EVENTS.BLUR\n        });\n      },\n      name,\n      value,\n      ref: elm => {\n        const field = get(control._fields, name);\n        if (elm && field && elm.focus) {\n          field._f.ref = {\n            focus: () => elm.focus(),\n            setCustomValidity: message => elm.setCustomValidity(message),\n            reportValidity: () => elm.reportValidity()\n          };\n        }\n      }\n    },\n    formState,\n    fieldState: {\n      invalid: !!get(formState.errors, name),\n      isDirty: !!get(formState.dirtyFields, name),\n      isTouched: !!get(formState.touchedFields, name),\n      error: get(formState.errors, name)\n    }\n  };\n}\nconst Controller = props => props.render(useController(props));\nvar appendErrors = (name, validateAllFieldCriteria, errors, type, message) => validateAllFieldCriteria ? Object.assign(Object.assign({}, errors[name]), {\n  types: Object.assign(Object.assign({}, errors[name] && errors[name].types ? errors[name].types : {}), {\n    [type]: message || true\n  })\n}) : {};\nvar isKey = value => /^\\w*$/.test(value);\nvar stringToPath = input => compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\nfunction set(object, path, value) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue = isObject(objValue) || Array.isArray(objValue) ? objValue : !isNaN(+tempPath[index + 1]) ? [] : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\nconst focusFieldBy = (fields, callback, fieldsNames) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n    if (field) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n      if (_f && callback(_f.name)) {\n        if (_f.ref.focus && isUndefined(_f.ref.focus())) {\n          break;\n        } else if (_f.refs) {\n          _f.refs[0].focus();\n          break;\n        }\n      } else if (isObject(current)) {\n        focusFieldBy(current, callback);\n      }\n    }\n  }\n};\nvar getFocusFieldName = (name, index, options = {}) => options.shouldFocus || isUndefined(options.shouldFocus) ? options.focusName || `${name}.${isUndefined(options.focusIndex) ? index : options.focusIndex}.` : '';\nvar mapCurrentIds = (values, _fieldIds, keyName) => values.map((value, index) => {\n  const output = _fieldIds.current[index];\n  return Object.assign(Object.assign({}, value), output ? {\n    [keyName]: output[keyName]\n  } : {});\n});\nvar generateId = () => {\n  const d = typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\n    const r = (Math.random() * 16 + d) % 16 | 0;\n    return (c == 'x' ? r : r & 0x3 | 0x8).toString(16);\n  });\n};\nvar mapIds = (values = [], keyName) => values.map(value => Object.assign(Object.assign({}, value[keyName] ? {} : {\n  [keyName]: generateId()\n}), value));\nfunction append(data, value) {\n  return [...convertToArrayPayload(data), ...convertToArrayPayload(value)];\n}\nvar fillEmptyArray = value => Array.isArray(value) ? value.map(() => undefined) : undefined;\nfunction insert(data, index, value) {\n  return [...data.slice(0, index), ...convertToArrayPayload(value), ...data.slice(index)];\n}\nvar moveArrayAt = (data, from, to) => {\n  if (Array.isArray(data)) {\n    if (isUndefined(data[to])) {\n      data[to] = undefined;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n  }\n  return [];\n};\nvar omitKeys = (fields, keyName) => fields.map((field = {}) => omit(field, keyName));\nfunction prepend(data, value) {\n  return [...convertToArrayPayload(value), ...convertToArrayPayload(data)];\n}\nfunction removeAtIndexes(data, indexes) {\n  let i = 0;\n  const temp = [...data];\n  for (const index of indexes) {\n    temp.splice(index - i, 1);\n    i++;\n  }\n  return compact(temp).length ? temp : [];\n}\nvar removeArrayAt = (data, index) => isUndefined(index) ? [] : removeAtIndexes(data, convertToArrayPayload(index).sort((a, b) => a - b));\nvar swapArrayAt = (data, indexA, indexB) => {\n  data[indexA] = [data[indexB], data[indexB] = data[indexA]][0];\n};\nvar updateAt = (fieldValues, index, value) => {\n  fieldValues[index] = value;\n  return fieldValues;\n};\nconst useFieldArray = props => {\n  const methods = useFormContext();\n  const {\n    control = methods.control,\n    name,\n    keyName = 'id',\n    shouldUnregister\n  } = props;\n  const [fields, setFields] = React.useState(mapIds(control._getFieldArray(name), keyName));\n  const _fieldIds = React.useRef(fields);\n  const _name = React.useRef(name);\n  const _actioned = React.useRef(false);\n  _name.current = name;\n  _fieldIds.current = fields;\n  control._names.array.add(name);\n  useSubscribe({\n    callback: ({\n      values,\n      name: fieldArrayName\n    }) => {\n      if (fieldArrayName === _name.current || !fieldArrayName) {\n        setFields(mapIds(get(values, _name.current), keyName));\n      }\n    },\n    subject: control._subjects.array\n  });\n  const updateValues = React.useCallback(updatedFieldArrayValuesWithKey => {\n    const updatedFieldArrayValues = omitKeys(updatedFieldArrayValuesWithKey, keyName);\n    _actioned.current = true;\n    set(control._formValues, name, updatedFieldArrayValues);\n    return updatedFieldArrayValues;\n  }, [control, name, keyName]);\n  const append$1 = (value, options) => {\n    const appendValue = convertToArrayPayload(value);\n    const updatedFieldArrayValuesWithKey = append(mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName), mapIds(appendValue, keyName));\n    control._updateFieldArray(name, append, {\n      argA: fillEmptyArray(value)\n    }, updateValues(updatedFieldArrayValuesWithKey));\n    setFields(updatedFieldArrayValuesWithKey);\n    control._names.focus = getFocusFieldName(name, updatedFieldArrayValuesWithKey.length - appendValue.length, options);\n  };\n  const prepend$1 = (value, options) => {\n    const updatedFieldArrayValuesWithKey = prepend(mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName), mapIds(convertToArrayPayload(value), keyName));\n    control._updateFieldArray(name, prepend, {\n      argA: fillEmptyArray(value)\n    }, updateValues(updatedFieldArrayValuesWithKey));\n    setFields(updatedFieldArrayValuesWithKey);\n    control._names.focus = getFocusFieldName(name, 0, options);\n  };\n  const remove = index => {\n    const updatedFieldArrayValuesWithKey = removeArrayAt(mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName), index);\n    control._updateFieldArray(name, removeArrayAt, {\n      argA: index\n    }, updateValues(updatedFieldArrayValuesWithKey));\n    setFields(updatedFieldArrayValuesWithKey);\n  };\n  const insert$1 = (index, value, options) => {\n    const updatedFieldArrayValuesWithKey = insert(mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName), index, mapIds(convertToArrayPayload(value), keyName));\n    control._updateFieldArray(name, insert, {\n      argA: index,\n      argB: fillEmptyArray(value)\n    }, updateValues(updatedFieldArrayValuesWithKey));\n    setFields(updatedFieldArrayValuesWithKey);\n    control._names.focus = getFocusFieldName(name, index, options);\n  };\n  const swap = (indexA, indexB) => {\n    const updatedFieldArrayValuesWithKey = mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName);\n    swapArrayAt(updatedFieldArrayValuesWithKey, indexA, indexB);\n    control._updateFieldArray(name, swapArrayAt, {\n      argA: indexA,\n      argB: indexB\n    }, updateValues(updatedFieldArrayValuesWithKey), false);\n    setFields(updatedFieldArrayValuesWithKey);\n  };\n  const move = (from, to) => {\n    const updatedFieldArrayValuesWithKey = mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName);\n    moveArrayAt(updatedFieldArrayValuesWithKey, from, to);\n    control._updateFieldArray(name, moveArrayAt, {\n      argA: from,\n      argB: to\n    }, updateValues(updatedFieldArrayValuesWithKey), false);\n    setFields(updatedFieldArrayValuesWithKey);\n  };\n  const update = (index, value) => {\n    const updatedFieldArrayValuesWithKey = mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName);\n    const updatedFieldArrayValues = updateAt(updatedFieldArrayValuesWithKey, index, value);\n    _fieldIds.current = mapIds(updatedFieldArrayValues, keyName);\n    control._updateFieldArray(name, updateAt, {\n      argA: index,\n      argB: value\n    }, updateValues(_fieldIds.current), true, false);\n    setFields(_fieldIds.current);\n  };\n  const replace = value => {\n    const updatedFieldArrayValuesWithKey = mapIds(convertToArrayPayload(value), keyName);\n    control._updateFieldArray(name, () => updatedFieldArrayValuesWithKey, {}, updateValues(updatedFieldArrayValuesWithKey), true, false);\n    setFields(updatedFieldArrayValuesWithKey);\n  };\n  React.useEffect(() => {\n    control._stateFlags.action = false;\n    if (control._names.watchAll) {\n      control._subjects.state.next({});\n    } else {\n      for (const watchField of control._names.watch) {\n        if (name.startsWith(watchField)) {\n          control._subjects.state.next({});\n          break;\n        }\n      }\n    }\n    if (_actioned.current) {\n      control._executeSchema([name]).then(result => {\n        const error = get(result.errors, name);\n        if (error && error.type && !get(control._formState.errors, name)) {\n          set(control._formState.errors, name, error);\n          control._subjects.state.next({\n            errors: control._formState.errors\n          });\n        }\n      });\n    }\n    control._subjects.watch.next({\n      name,\n      values: control._formValues\n    });\n    control._names.focus && focusFieldBy(control._fields, key => key.startsWith(control._names.focus));\n    control._names.focus = '';\n    control._proxyFormState.isValid && control._updateValid();\n  }, [fields, name, control, keyName]);\n  React.useEffect(() => {\n    !get(control._formValues, name) && set(control._formValues, name, []);\n    return () => {\n      if (control._options.shouldUnregister || shouldUnregister) {\n        control.unregister(name);\n      }\n    };\n  }, [name, control, keyName, shouldUnregister]);\n  return {\n    swap: React.useCallback(swap, [updateValues, name, control, keyName]),\n    move: React.useCallback(move, [updateValues, name, control, keyName]),\n    prepend: React.useCallback(prepend$1, [updateValues, name, control, keyName]),\n    append: React.useCallback(append$1, [updateValues, name, control, keyName]),\n    remove: React.useCallback(remove, [updateValues, name, control, keyName]),\n    insert: React.useCallback(insert$1, [updateValues, name, control, keyName]),\n    update: React.useCallback(update, [updateValues, name, control, keyName]),\n    replace: React.useCallback(replace, [updateValues, name, control, keyName]),\n    fields: fields\n  };\n};\nvar isFunction = value => typeof value === 'function';\nfunction cloneObject(data) {\n  let copy;\n  const isArray = Array.isArray(data);\n  if (data instanceof Date) {\n    copy = new Date(data);\n  } else if (data instanceof Set) {\n    copy = new Set(data);\n  } else if (isArray || isObject(data)) {\n    copy = isArray ? [] : {};\n    for (const key in data) {\n      if (isFunction(data[key])) {\n        copy = data;\n        break;\n      }\n      copy[key] = cloneObject(data[key]);\n    }\n  } else {\n    return data;\n  }\n  return copy;\n}\nfunction createSubject() {\n  let _observers = [];\n  const next = value => {\n    for (const observer of _observers) {\n      observer.next(value);\n    }\n  };\n  const subscribe = observer => {\n    _observers.push(observer);\n    return {\n      unsubscribe: () => {\n        _observers = _observers.filter(o => o !== observer);\n      }\n    };\n  };\n  const unsubscribe = () => {\n    _observers = [];\n  };\n  return {\n    get observers() {\n      return _observers;\n    },\n    next,\n    subscribe,\n    unsubscribe\n  };\n}\nvar isPrimitive = value => isNullOrUndefined(value) || !isObjectType(value);\nfunction deepEqual(object1, object2) {\n  if (isPrimitive(object1) || isPrimitive(object2)) {\n    return object1 === object2;\n  }\n  if (isDateObject(object1) && isDateObject(object2)) {\n    return object1.getTime() === object2.getTime();\n  }\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n  for (const key of keys1) {\n    const val1 = object1[key];\n    if (!keys2.includes(key)) {\n      return false;\n    }\n    if (key !== 'ref') {\n      const val2 = object2[key];\n      if (isDateObject(val1) && isDateObject(val2) || isObject(val1) && isObject(val2) || Array.isArray(val1) && Array.isArray(val2) ? !deepEqual(val1, val2) : val1 !== val2) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\nvar getValidationModes = mode => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched\n});\nvar isBoolean = value => typeof value === 'boolean';\nvar isFileInput = element => element.type === 'file';\nvar isHTMLElement = value => value instanceof HTMLElement;\nvar isMultipleSelect = element => element.type === `select-multiple`;\nvar isRadioInput = element => element.type === 'radio';\nvar isRadioOrCheckboxFunction = ref => isRadioInput(ref) || isCheckBoxInput(ref);\nvar isWeb = typeof window !== 'undefined' && typeof window.HTMLElement !== 'undefined' && typeof document !== 'undefined';\nvar live = ref => isHTMLElement(ref) && document.contains(ref);\nfunction baseGet(object, updatePath) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n  return object;\n}\nfunction unset(object, path) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject = updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n  if (childObject) {\n    delete childObject[key];\n  }\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n    if (k > 0) {\n      previousObjRef = object;\n    }\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n      if (currentPathsLength === index && (isObject(objectRef) && isEmptyObject(objectRef) || Array.isArray(objectRef) && !objectRef.filter(data => isObject(data) && !isEmptyObject(data) || isBoolean(data)).length)) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n      previousObjRef = objectRef;\n    }\n  }\n  return object;\n}\nconst defaultResult = {\n  value: false,\n  isValid: false\n};\nconst validResult = {\n  value: true,\n  isValid: true\n};\nvar getCheckboxValue = options => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options.filter(option => option && option.checked && !option.disabled).map(option => option.value);\n      return {\n        value: values,\n        isValid: !!values.length\n      };\n    }\n    return options[0].checked && !options[0].disabled ?\n    // @ts-expect-error expected to work in the browser\n    options[0].attributes && !isUndefined(options[0].attributes.value) ? isUndefined(options[0].value) || options[0].value === '' ? validResult : {\n      value: options[0].value,\n      isValid: true\n    } : validResult : defaultResult;\n  }\n  return defaultResult;\n};\nvar getFieldValueAs = (value, {\n  valueAsNumber,\n  valueAsDate,\n  setValueAs\n}) => isUndefined(value) ? value : valueAsNumber ? value === '' ? NaN : +value : valueAsDate ? new Date(value) : setValueAs ? setValueAs(value) : value;\nconst defaultReturn = {\n  isValid: false,\n  value: null\n};\nvar getRadioValue = options => Array.isArray(options) ? options.reduce((previous, option) => option && option.checked && !option.disabled ? {\n  isValid: true,\n  value: option.value\n} : previous, defaultReturn) : defaultReturn;\nfunction getFieldValue(_f) {\n  const ref = _f.ref;\n  if (_f.refs ? _f.refs.every(ref => ref.disabled) : ref.disabled) {\n    return;\n  }\n  if (isFileInput(ref)) {\n    return ref.files;\n  }\n  if (isRadioInput(ref)) {\n    return getRadioValue(_f.refs).value;\n  }\n  if (isMultipleSelect(ref)) {\n    return [...ref.selectedOptions].map(({\n      value\n    }) => value);\n  }\n  if (isCheckBoxInput(ref)) {\n    return getCheckboxValue(_f.refs).value;\n  }\n  return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\nvar getResolverOptions = (fieldsNames, _fields, criteriaMode, shouldUseNativeValidation) => {\n  const fields = {};\n  for (const name of fieldsNames) {\n    const field = get(_fields, name);\n    field && set(fields, name, field._f);\n  }\n  return {\n    criteriaMode,\n    names: [...fieldsNames],\n    fields,\n    shouldUseNativeValidation\n  };\n};\nvar hasValidation = options => options.mount && (options.required || options.min || options.max || options.maxLength || options.minLength || options.pattern || options.validate);\nfunction schemaErrorLookup(errors, _fields, name) {\n  const error = get(errors, name);\n  if (error || isKey(name)) {\n    return {\n      error,\n      name\n    };\n  }\n  const names = name.split('.');\n  while (names.length) {\n    const fieldName = names.join('.');\n    const field = get(_fields, fieldName);\n    const foundError = get(errors, fieldName);\n    if (field && !Array.isArray(field) && name !== fieldName) {\n      return {\n        name\n      };\n    }\n    if (foundError && foundError.type) {\n      return {\n        name: fieldName,\n        error: foundError\n      };\n    }\n    names.pop();\n  }\n  return {\n    name\n  };\n}\nfunction deepMerge(target, source) {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n    try {\n      target[key] = isObject(targetValue) && isObject(sourceValue) || Array.isArray(targetValue) && Array.isArray(sourceValue) ? deepMerge(targetValue, sourceValue) : sourceValue;\n    } catch (_a) {}\n  }\n  return target;\n}\nfunction setDirtyFields(values, defaultValues, dirtyFields, parentNode, parentName) {\n  let index = -1;\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setDirtyFields(values[index][key], get(defaultValues[index] || {}, key, []), dirtyFields[index][key], dirtyFields[index], key);\n      } else {\n        !isNullOrUndefined(defaultValues) && deepEqual(get(defaultValues[index] || {}, key), values[index][key]) ? set(dirtyFields[index] || {}, key) : dirtyFields[index] = Object.assign(Object.assign({}, dirtyFields[index]), {\n          [key]: true\n        });\n      }\n    }\n    parentNode && !dirtyFields.length && delete parentNode[parentName];\n  }\n  return dirtyFields;\n}\nvar setFieldArrayDirtyFields = (values, defaultValues, dirtyFields) => deepMerge(setDirtyFields(values, defaultValues, dirtyFields.slice(0, values.length)), setDirtyFields(defaultValues, values, dirtyFields.slice(0, values.length)));\nvar skipValidation = (isBlurEvent, isTouched, isSubmitted, reValidateMode, mode) => {\n  if (mode.isOnAll) {\n    return false;\n  } else if (!isSubmitted && mode.isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\nvar unsetEmptyArray = (ref, name) => !compact(get(ref, name, [])).length && unset(ref, name);\nvar isMessage = value => isString(value) || React.isValidElement(value);\nvar isRegex = value => value instanceof RegExp;\nfunction getValidateError(result, ref, type = 'validate') {\n  if (isMessage(result) || Array.isArray(result) && result.every(isMessage) || isBoolean(result) && !result) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref\n    };\n  }\n}\nvar getValueAndMessage = validationData => isObject(validationData) && !isRegex(validationData) ? validationData : {\n  value: validationData,\n  message: ''\n};\nvar validateField = async (field, inputValue, validateAllFieldCriteria, shouldUseNativeValidation) => {\n  const {\n    ref,\n    refs,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n    name,\n    valueAsNumber,\n    mount,\n    disabled\n  } = field._f;\n  if (!mount || disabled) {\n    return {};\n  }\n  const inputRef = refs ? refs[0] : ref;\n  const setCustomValidty = message => {\n    if (shouldUseNativeValidation && inputRef.reportValidity) {\n      inputRef.setCustomValidity(isBoolean(message) ? '' : message || ' ');\n      inputRef.reportValidity();\n    }\n  };\n  const error = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty = (valueAsNumber || isFileInput(ref)) && !ref.value || inputValue === '' || Array.isArray(inputValue) && !inputValue.length;\n  const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\n  const getMinMaxMessage = (exceedMax, maxLengthMessage, minLengthMessage, maxType = INPUT_VALIDATION_RULES.maxLength, minType = INPUT_VALIDATION_RULES.minLength) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = Object.assign({\n      type: exceedMax ? maxType : minType,\n      message,\n      ref\n    }, appendErrorsCurry(exceedMax ? maxType : minType, message));\n  };\n  if (required && (!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue)) || isBoolean(inputValue) && !inputValue || isCheckBox && !getCheckboxValue(refs).isValid || isRadio && !getRadioValue(refs).isValid)) {\n    const {\n      value,\n      message\n    } = isMessage(required) ? {\n      value: !!required,\n      message: required\n    } : getValueAndMessage(required);\n    if (value) {\n      error[name] = Object.assign({\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: inputRef\n      }, appendErrorsCurry(INPUT_VALIDATION_RULES.required, message));\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(message);\n        return error;\n      }\n    }\n  }\n  if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n    if (!isNaN(inputValue)) {\n      const valueNumber = ref.valueAsNumber || parseFloat(inputValue);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate = ref.valueAsDate || new Date(inputValue);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(!!exceedMax, maxOutput.message, minOutput.message, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(error[name].message);\n        return error;\n      }\n    }\n  }\n  if ((maxLength || minLength) && !isEmpty && isString(inputValue)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax = !isNullOrUndefined(maxLengthOutput.value) && inputValue.length > maxLengthOutput.value;\n    const exceedMin = !isNullOrUndefined(minLengthOutput.value) && inputValue.length < minLengthOutput.value;\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(exceedMax, maxLengthOutput.message, minLengthOutput.message);\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(error[name].message);\n        return error;\n      }\n    }\n  }\n  if (pattern && !isEmpty && isString(inputValue)) {\n    const {\n      value: patternValue,\n      message\n    } = getValueAndMessage(pattern);\n    if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n      error[name] = Object.assign({\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref\n      }, appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message));\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(message);\n        return error;\n      }\n    }\n  }\n  if (validate) {\n    if (isFunction(validate)) {\n      const result = await validate(inputValue);\n      const validateError = getValidateError(result, inputRef);\n      if (validateError) {\n        error[name] = Object.assign(Object.assign({}, validateError), appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message));\n        if (!validateAllFieldCriteria) {\n          setCustomValidty(validateError.message);\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {};\n      for (const key in validate) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n        const validateError = getValidateError(await validate[key](inputValue), inputRef, key);\n        if (validateError) {\n          validationResult = Object.assign(Object.assign({}, validateError), appendErrorsCurry(key, validateError.message));\n          setCustomValidty(validateError.message);\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n      if (!isEmptyObject(validationResult)) {\n        error[name] = Object.assign({\n          ref: inputRef\n        }, validationResult);\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n  setCustomValidty(true);\n  return error;\n};\nconst defaultOptions = {\n  mode: VALIDATION_MODE.onSubmit,\n  reValidateMode: VALIDATION_MODE.onChange,\n  shouldFocusError: true\n};\nconst isWindowUndefined = typeof window === 'undefined';\nfunction createFormControl(props = {}) {\n  let _options = Object.assign(Object.assign({}, defaultOptions), props);\n  let _formState = {\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {}\n  };\n  let _fields = {};\n  let _defaultValues = _options.defaultValues || {};\n  let _formValues = _options.shouldUnregister ? {} : cloneObject(_defaultValues);\n  let _stateFlags = {\n    action: false,\n    mount: false,\n    watch: false\n  };\n  let _names = {\n    mount: new Set(),\n    unMount: new Set(),\n    array: new Set(),\n    watch: new Set()\n  };\n  let delayErrorCallback;\n  let timer = 0;\n  let validateFields = {};\n  const _proxyFormState = {\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false\n  };\n  const _subjects = {\n    watch: createSubject(),\n    array: createSubject(),\n    state: createSubject()\n  };\n  const validationModeBeforeSubmit = getValidationModes(_options.mode);\n  const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\n  const shouldDisplayAllAssociatedErrors = _options.criteriaMode === VALIDATION_MODE.all;\n  const debounce = (callback, wait) => (...args) => {\n    clearTimeout(timer);\n    timer = window.setTimeout(() => callback(...args), wait);\n  };\n  const isFieldWatched = (name, isBlurEvent) => !isBlurEvent && (_names.watchAll || _names.watch.has(name) || _names.watch.has((name.match(/\\w+/) || [])[0]));\n  const _updateValid = async shouldSkipRender => {\n    let isValid = false;\n    if (_proxyFormState.isValid) {\n      isValid = _options.resolver ? isEmptyObject((await _executeSchema()).errors) : await executeBuildInValidation(_fields, true);\n      if (!shouldSkipRender && isValid !== _formState.isValid) {\n        _formState.isValid = isValid;\n        _subjects.state.next({\n          isValid\n        });\n      }\n    }\n    return isValid;\n  };\n  const _updateFieldArray = (name, method, args, values = [], shouldSetValues = true, shouldSetFields = true) => {\n    _stateFlags.action = true;\n    if (shouldSetFields && get(_fields, name)) {\n      const fieldValues = method(get(_fields, name), args.argA, args.argB);\n      shouldSetValues && set(_fields, name, fieldValues);\n    }\n    if (Array.isArray(get(_formState.errors, name))) {\n      const errors = method(get(_formState.errors, name), args.argA, args.argB);\n      shouldSetValues && set(_formState.errors, name, errors);\n      unsetEmptyArray(_formState.errors, name);\n    }\n    if (_proxyFormState.touchedFields && get(_formState.touchedFields, name)) {\n      const touchedFields = method(get(_formState.touchedFields, name), args.argA, args.argB);\n      shouldSetValues && set(_formState.touchedFields, name, touchedFields);\n      unsetEmptyArray(_formState.touchedFields, name);\n    }\n    if (_proxyFormState.dirtyFields || _proxyFormState.isDirty) {\n      updateFieldArrayDirty(name, values);\n    }\n    _subjects.state.next({\n      isDirty: _getDirty(name, values),\n      dirtyFields: _formState.dirtyFields,\n      errors: _formState.errors,\n      isValid: _formState.isValid\n    });\n  };\n  const updateErrors = (name, error) => (set(_formState.errors, name, error), _subjects.state.next({\n    errors: _formState.errors\n  }));\n  const updateValidAndValue = (name, shouldSkipSetValueAs, ref) => {\n    const field = get(_fields, name);\n    if (field) {\n      const defaultValue = get(_formValues, name, get(_defaultValues, name));\n      isUndefined(defaultValue) || ref && ref.defaultChecked || shouldSkipSetValueAs ? set(_formValues, name, shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f)) : setFieldValue(name, defaultValue);\n    }\n    _stateFlags.mount && _updateValid();\n  };\n  const updateTouchAndDirty = (name, fieldValue, isCurrentTouched, shouldRender = true) => {\n    let isFieldDirty = false;\n    const output = {\n      name\n    };\n    const isPreviousFieldTouched = get(_formState.touchedFields, name);\n    if (_proxyFormState.isDirty) {\n      const isPreviousFormDirty = _formState.isDirty;\n      _formState.isDirty = output.isDirty = _getDirty();\n      isFieldDirty = isPreviousFormDirty !== output.isDirty;\n    }\n    if (_proxyFormState.dirtyFields && !isCurrentTouched) {\n      const isPreviousFieldDirty = get(_formState.dirtyFields, name);\n      const isCurrentFieldPristine = deepEqual(get(_defaultValues, name), fieldValue);\n      isCurrentFieldPristine ? unset(_formState.dirtyFields, name) : set(_formState.dirtyFields, name, true);\n      output.dirtyFields = _formState.dirtyFields;\n      isFieldDirty = isFieldDirty || isPreviousFieldDirty !== get(_formState.dirtyFields, name);\n    }\n    if (isCurrentTouched && !isPreviousFieldTouched) {\n      set(_formState.touchedFields, name, isCurrentTouched);\n      output.touchedFields = _formState.touchedFields;\n      isFieldDirty = isFieldDirty || _proxyFormState.touchedFields && isPreviousFieldTouched !== isCurrentTouched;\n    }\n    isFieldDirty && shouldRender && _subjects.state.next(output);\n    return isFieldDirty ? output : {};\n  };\n  const updateFieldArrayDirty = (name, value) => (set(_formState.dirtyFields, name, setFieldArrayDirtyFields(value, get(_defaultValues, name, []), get(_formState.dirtyFields, name, []))), unsetEmptyArray(_formState.dirtyFields, name));\n  const shouldRenderByError = async (shouldSkipRender, name, isValid, error, fieldState) => {\n    const previousFieldError = get(_formState.errors, name);\n    const shouldUpdateValid = _proxyFormState.isValid && _formState.isValid !== isValid;\n    if (props.delayError && error) {\n      delayErrorCallback = delayErrorCallback || debounce(updateErrors, props.delayError);\n      delayErrorCallback(name, error);\n    } else {\n      clearTimeout(timer);\n      error ? set(_formState.errors, name, error) : unset(_formState.errors, name);\n    }\n    if (((error ? !deepEqual(previousFieldError, error) : previousFieldError) || !isEmptyObject(fieldState) || shouldUpdateValid) && !shouldSkipRender) {\n      const updatedFormState = Object.assign(Object.assign(Object.assign({}, fieldState), shouldUpdateValid ? {\n        isValid\n      } : {}), {\n        errors: _formState.errors,\n        name\n      });\n      _formState = Object.assign(Object.assign({}, _formState), updatedFormState);\n      _subjects.state.next(updatedFormState);\n    }\n    validateFields[name]--;\n    if (_proxyFormState.isValidating && !validateFields[name]) {\n      _subjects.state.next({\n        isValidating: false\n      });\n      validateFields = {};\n    }\n  };\n  const _executeSchema = async name => _options.resolver ? await _options.resolver(Object.assign({}, _formValues), _options.context, getResolverOptions(name || _names.mount, _fields, _options.criteriaMode, _options.shouldUseNativeValidation)) : {};\n  const executeSchemaAndUpdateState = async names => {\n    const {\n      errors\n    } = await _executeSchema();\n    if (names) {\n      for (const name of names) {\n        const error = get(errors, name);\n        error ? set(_formState.errors, name, error) : unset(_formState.errors, name);\n      }\n    } else {\n      _formState.errors = errors;\n    }\n    return errors;\n  };\n  const executeBuildInValidation = async (fields, shouldOnlyCheckValid, context = {\n    valid: true\n  }) => {\n    for (const name in fields) {\n      const field = fields[name];\n      if (field) {\n        const fieldReference = field._f;\n        const fieldValue = omit(field, '_f');\n        if (fieldReference) {\n          const fieldError = await validateField(field, get(_formValues, fieldReference.name), shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation);\n          if (fieldError[fieldReference.name]) {\n            context.valid = false;\n            if (shouldOnlyCheckValid) {\n              break;\n            }\n          }\n          if (!shouldOnlyCheckValid) {\n            fieldError[fieldReference.name] ? set(_formState.errors, fieldReference.name, fieldError[fieldReference.name]) : unset(_formState.errors, fieldReference.name);\n          }\n        }\n        fieldValue && (await executeBuildInValidation(fieldValue, shouldOnlyCheckValid, context));\n      }\n    }\n    return context.valid;\n  };\n  const _removeUnmounted = () => {\n    for (const name of _names.unMount) {\n      const field = get(_fields, name);\n      field && (field._f.refs ? field._f.refs.every(ref => !live(ref)) : !live(field._f.ref)) && unregister(name);\n    }\n    _names.unMount = new Set();\n  };\n  const _getDirty = (name, data) => (name && data && set(_formValues, name, data), !deepEqual(getValues(), _defaultValues));\n  const _getWatch = (names, defaultValue, isGlobal) => {\n    const fieldValues = Object.assign({}, _stateFlags.mount ? _formValues : isUndefined(defaultValue) ? _defaultValues : isString(names) ? {\n      [names]: defaultValue\n    } : defaultValue);\n    return generateWatchOutput(names, _names, fieldValues, isGlobal);\n  };\n  const _getFieldArray = name => get(_stateFlags.mount ? _formValues : _defaultValues, name, props.shouldUnregister ? get(_defaultValues, name, []) : []);\n  const setFieldValue = (name, value, options = {}) => {\n    const field = get(_fields, name);\n    let fieldValue = value;\n    if (field) {\n      const fieldReference = field._f;\n      if (fieldReference) {\n        set(_formValues, name, getFieldValueAs(value, fieldReference));\n        fieldValue = isWeb && isHTMLElement(fieldReference.ref) && isNullOrUndefined(value) ? '' : value;\n        if (isFileInput(fieldReference.ref) && !isString(fieldValue)) {\n          fieldReference.ref.files = fieldValue;\n        } else if (isMultipleSelect(fieldReference.ref)) {\n          [...fieldReference.ref.options].forEach(selectRef => selectRef.selected = fieldValue.includes(selectRef.value));\n        } else if (fieldReference.refs) {\n          if (isCheckBoxInput(fieldReference.ref)) {\n            fieldReference.refs.length > 1 ? fieldReference.refs.forEach(checkboxRef => checkboxRef.checked = Array.isArray(fieldValue) ? !!fieldValue.find(data => data === checkboxRef.value) : fieldValue === checkboxRef.value) : fieldReference.refs[0].checked = !!fieldValue;\n          } else {\n            fieldReference.refs.forEach(radioRef => radioRef.checked = radioRef.value === fieldValue);\n          }\n        } else {\n          fieldReference.ref.value = fieldValue;\n        }\n      }\n    }\n    (options.shouldDirty || options.shouldTouch) && updateTouchAndDirty(name, fieldValue, options.shouldTouch);\n    options.shouldValidate && trigger(name);\n  };\n  const setValues = (name, value, options) => {\n    for (const fieldKey in value) {\n      const fieldValue = value[fieldKey];\n      const fieldName = `${name}.${fieldKey}`;\n      const field = get(_fields, fieldName);\n      (_names.array.has(name) || !isPrimitive(fieldValue) || field && !field._f) && !isDateObject(fieldValue) ? setValues(fieldName, fieldValue, options) : setFieldValue(fieldName, fieldValue, options);\n    }\n  };\n  const setValue = (name, value, options = {}) => {\n    const field = get(_fields, name);\n    const isFieldArray = _names.array.has(name);\n    set(_formValues, name, value);\n    if (isFieldArray) {\n      _subjects.array.next({\n        name,\n        values: _formValues\n      });\n      if ((_proxyFormState.isDirty || _proxyFormState.dirtyFields) && options.shouldDirty) {\n        updateFieldArrayDirty(name, value);\n        _subjects.state.next({\n          name,\n          dirtyFields: _formState.dirtyFields,\n          isDirty: _getDirty(name, value)\n        });\n      }\n    } else {\n      field && !field._f && !isNullOrUndefined(value) ? setValues(name, value, options) : setFieldValue(name, value, options);\n    }\n    isFieldWatched(name) && _subjects.state.next({});\n    _subjects.watch.next({\n      name\n    });\n  };\n  const handleChange = async event => {\n    const target = event.target;\n    let name = target.name;\n    const field = get(_fields, name);\n    if (field) {\n      let error;\n      let isValid;\n      const fieldValue = target.type ? getFieldValue(field._f) : target.value;\n      const isBlurEvent = event.type === EVENTS.BLUR;\n      const shouldSkipValidation = !hasValidation(field._f) && !_options.resolver && !get(_formState.errors, name) && !field._f.deps || skipValidation(isBlurEvent, get(_formState.touchedFields, name), _formState.isSubmitted, validationModeAfterSubmit, validationModeBeforeSubmit);\n      const isWatched = isFieldWatched(name, isBlurEvent);\n      if (isBlurEvent) {\n        field._f.onBlur && field._f.onBlur(event);\n      } else if (field._f.onChange) {\n        field._f.onChange(event);\n      }\n      set(_formValues, name, fieldValue);\n      const fieldState = updateTouchAndDirty(name, fieldValue, isBlurEvent, false);\n      const shouldRender = !isEmptyObject(fieldState) || isWatched;\n      !isBlurEvent && _subjects.watch.next({\n        name,\n        type: event.type\n      });\n      if (shouldSkipValidation) {\n        return shouldRender && _subjects.state.next(Object.assign({\n          name\n        }, isWatched ? {} : fieldState));\n      }\n      !isBlurEvent && isWatched && _subjects.state.next({});\n      validateFields[name] = validateFields[name] ? +1 : 1;\n      _proxyFormState.isValidating && _subjects.state.next({\n        isValidating: true\n      });\n      if (_options.resolver) {\n        const {\n          errors\n        } = await _executeSchema([name]);\n        const previousErrorLookupResult = schemaErrorLookup(_formState.errors, _fields, name);\n        const errorLookupResult = schemaErrorLookup(errors, _fields, previousErrorLookupResult.name || name);\n        error = errorLookupResult.error;\n        name = errorLookupResult.name;\n        isValid = isEmptyObject(errors);\n      } else {\n        error = (await validateField(field, get(_formValues, name), shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation))[name];\n        isValid = await _updateValid(true);\n      }\n      field._f.deps && trigger(field._f.deps);\n      shouldRenderByError(false, name, isValid, error, fieldState);\n    }\n  };\n  const trigger = async (name, options = {}) => {\n    let isValid;\n    let validationResult;\n    const fieldNames = convertToArrayPayload(name);\n    _subjects.state.next({\n      isValidating: true\n    });\n    if (_options.resolver) {\n      const errors = await executeSchemaAndUpdateState(isUndefined(name) ? name : fieldNames);\n      isValid = isEmptyObject(errors);\n      validationResult = name ? !fieldNames.some(name => get(errors, name)) : isValid;\n    } else if (name) {\n      validationResult = (await Promise.all(fieldNames.map(async fieldName => {\n        const field = get(_fields, fieldName);\n        return await executeBuildInValidation(field && field._f ? {\n          [fieldName]: field\n        } : field);\n      }))).every(Boolean);\n      !(!validationResult && !_formState.isValid) && _updateValid();\n    } else {\n      validationResult = isValid = await executeBuildInValidation(_fields);\n    }\n    _subjects.state.next(Object.assign(Object.assign(Object.assign({}, !isString(name) || _proxyFormState.isValid && isValid !== _formState.isValid ? {} : {\n      name\n    }), _options.resolver ? {\n      isValid\n    } : {}), {\n      errors: _formState.errors,\n      isValidating: false\n    }));\n    options.shouldFocus && !validationResult && focusFieldBy(_fields, key => get(_formState.errors, key), name ? fieldNames : _names.mount);\n    return validationResult;\n  };\n  const getValues = fieldNames => {\n    const values = Object.assign(Object.assign({}, _defaultValues), _stateFlags.mount ? _formValues : {});\n    return isUndefined(fieldNames) ? values : isString(fieldNames) ? get(values, fieldNames) : fieldNames.map(name => get(values, name));\n  };\n  const clearErrors = name => {\n    name ? convertToArrayPayload(name).forEach(inputName => unset(_formState.errors, inputName)) : _formState.errors = {};\n    _subjects.state.next({\n      errors: _formState.errors,\n      isValid: true\n    });\n  };\n  const setError = (name, error, options) => {\n    const ref = (get(_fields, name, {\n      _f: {}\n    })._f || {}).ref;\n    set(_formState.errors, name, Object.assign(Object.assign({}, error), {\n      ref\n    }));\n    _subjects.state.next({\n      name,\n      errors: _formState.errors,\n      isValid: false\n    });\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n  const watch = (name, defaultValue) => isFunction(name) ? _subjects.watch.subscribe({\n    next: info => name(_getWatch(undefined, defaultValue), info)\n  }) : _getWatch(name, defaultValue, true);\n  const unregister = (name, options = {}) => {\n    for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\n      _names.mount.delete(fieldName);\n      _names.array.delete(fieldName);\n      if (get(_fields, fieldName)) {\n        if (!options.keepValue) {\n          unset(_fields, fieldName);\n          unset(_formValues, fieldName);\n        }\n        !options.keepError && unset(_formState.errors, fieldName);\n        !options.keepDirty && unset(_formState.dirtyFields, fieldName);\n        !options.keepTouched && unset(_formState.touchedFields, fieldName);\n        !_options.shouldUnregister && !options.keepDefaultValue && unset(_defaultValues, fieldName);\n      }\n    }\n    _subjects.watch.next({});\n    _subjects.state.next(Object.assign(Object.assign({}, _formState), !options.keepDirty ? {} : {\n      isDirty: _getDirty()\n    }));\n    !options.keepIsValid && _updateValid();\n  };\n  const register = (name, options = {}) => {\n    const field = get(_fields, name);\n    set(_fields, name, {\n      _f: Object.assign(Object.assign(Object.assign({}, field && field._f ? field._f : {\n        ref: {\n          name\n        }\n      }), {\n        name,\n        mount: true\n      }), options)\n    });\n    _names.mount.add(name);\n    !isUndefined(options.value) && !options.disabled && set(_formValues, name, get(_formValues, name, options.value));\n    field ? isBoolean(options.disabled) && set(_formValues, name, options.disabled ? undefined : get(_formValues, name, getFieldValue(field._f))) : updateValidAndValue(name, true);\n    return isWindowUndefined ? {\n      name: name\n    } : Object.assign(Object.assign({\n      name\n    }, isBoolean(options.disabled) ? {\n      disabled: options.disabled\n    } : {}), {\n      onChange: handleChange,\n      onBlur: handleChange,\n      ref: ref => {\n        if (ref) {\n          register(name, options);\n          let field = get(_fields, name);\n          const fieldRef = isUndefined(ref.value) ? ref.querySelectorAll ? ref.querySelectorAll('input,select,textarea')[0] || ref : ref : ref;\n          const isRadioOrCheckbox = isRadioOrCheckboxFunction(fieldRef);\n          if (fieldRef === field._f.ref || isRadioOrCheckbox && compact(field._f.refs || []).find(option => option === fieldRef)) {\n            return;\n          }\n          field = {\n            _f: isRadioOrCheckbox ? Object.assign(Object.assign({}, field._f), {\n              refs: [...compact(field._f.refs || []).filter(live), fieldRef],\n              ref: {\n                type: fieldRef.type,\n                name\n              }\n            }) : Object.assign(Object.assign({}, field._f), {\n              ref: fieldRef\n            })\n          };\n          set(_fields, name, field);\n          (!options || !options.disabled) && updateValidAndValue(name, false, fieldRef);\n        } else {\n          const field = get(_fields, name, {});\n          const shouldUnregister = _options.shouldUnregister || options.shouldUnregister;\n          if (field._f) {\n            field._f.mount = false;\n          }\n          shouldUnregister && !(isNameInFieldArray(_names.array, name) && _stateFlags.action) && _names.unMount.add(name);\n        }\n      }\n    });\n  };\n  const handleSubmit = (onValid, onInvalid) => async e => {\n    if (e) {\n      e.preventDefault && e.preventDefault();\n      e.persist && e.persist();\n    }\n    let hasNoPromiseError = true;\n    let fieldValues = _options.shouldUnregister ? cloneObject(_formValues) : Object.assign({}, _formValues);\n    _subjects.state.next({\n      isSubmitting: true\n    });\n    try {\n      if (_options.resolver) {\n        const {\n          errors,\n          values\n        } = await _executeSchema();\n        _formState.errors = errors;\n        fieldValues = values;\n      } else {\n        await executeBuildInValidation(_fields);\n      }\n      if (isEmptyObject(_formState.errors) && Object.keys(_formState.errors).every(name => get(fieldValues, name))) {\n        _subjects.state.next({\n          errors: {},\n          isSubmitting: true\n        });\n        await onValid(fieldValues, e);\n      } else {\n        onInvalid && (await onInvalid(_formState.errors, e));\n        _options.shouldFocusError && focusFieldBy(_fields, key => get(_formState.errors, key), _names.mount);\n      }\n    } catch (err) {\n      hasNoPromiseError = false;\n      throw err;\n    } finally {\n      _formState.isSubmitted = true;\n      _subjects.state.next({\n        isSubmitted: true,\n        isSubmitting: false,\n        isSubmitSuccessful: isEmptyObject(_formState.errors) && hasNoPromiseError,\n        submitCount: _formState.submitCount + 1,\n        errors: _formState.errors\n      });\n    }\n  };\n  const resetField = (name, options = {}) => {\n    if (isUndefined(options.defaultValue)) {\n      setValue(name, get(_defaultValues, name));\n    } else {\n      setValue(name, options.defaultValue);\n      set(_defaultValues, name, options.defaultValue);\n    }\n    if (!options.keepTouched) {\n      unset(_formState.touchedFields, name);\n    }\n    if (!options.keepDirty) {\n      unset(_formState.dirtyFields, name);\n      _formState.isDirty = options.defaultValue ? _getDirty(name, get(_defaultValues, name)) : _getDirty();\n    }\n    if (!options.keepError) {\n      unset(_formState.errors, name);\n      _proxyFormState.isValid && _updateValid();\n    }\n    _subjects.state.next(Object.assign({}, _formState));\n  };\n  const reset = (formValues, keepStateOptions = {}) => {\n    const updatedValues = formValues || _defaultValues;\n    const cloneUpdatedValues = cloneObject(updatedValues);\n    const values = !isEmptyObject(formValues) ? cloneUpdatedValues : _defaultValues;\n    if (!keepStateOptions.keepDefaultValues) {\n      _defaultValues = updatedValues;\n    }\n    if (!keepStateOptions.keepValues) {\n      if (isWeb) {\n        for (const name of _names.mount) {\n          const field = get(_fields, name);\n          if (field && field._f) {\n            const fieldReference = Array.isArray(field._f.refs) ? field._f.refs[0] : field._f.ref;\n            try {\n              isHTMLElement(fieldReference) && fieldReference.closest('form').reset();\n              break;\n            } catch (_a) {}\n          }\n        }\n      }\n      _formValues = props.shouldUnregister ? keepStateOptions.keepDefaultValues ? cloneObject(_defaultValues) : {} : cloneUpdatedValues;\n      _fields = {};\n      _subjects.watch.next({\n        values\n      });\n      _subjects.array.next({\n        values\n      });\n    }\n    _names = {\n      mount: new Set(),\n      unMount: new Set(),\n      array: new Set(),\n      watch: new Set(),\n      watchAll: false,\n      focus: ''\n    };\n    _subjects.state.next({\n      submitCount: keepStateOptions.keepSubmitCount ? _formState.submitCount : 0,\n      isDirty: keepStateOptions.keepDirty ? _formState.isDirty : keepStateOptions.keepDefaultValues ? !deepEqual(formValues, _defaultValues) : false,\n      isSubmitted: keepStateOptions.keepIsSubmitted ? _formState.isSubmitted : false,\n      dirtyFields: keepStateOptions.keepDirty ? _formState.dirtyFields : keepStateOptions.keepDefaultValues && formValues ? Object.entries(formValues).reduce((previous, [key, value]) => Object.assign(Object.assign({}, previous), {\n        [key]: value !== get(_defaultValues, key)\n      }), {}) : {},\n      touchedFields: keepStateOptions.keepTouched ? _formState.touchedFields : {},\n      errors: keepStateOptions.keepErrors ? _formState.errors : {},\n      isSubmitting: false,\n      isSubmitSuccessful: false\n    });\n    _stateFlags.mount = !_proxyFormState.isValid || !!keepStateOptions.keepIsValid;\n    _stateFlags.watch = !!props.shouldUnregister;\n  };\n  const setFocus = name => {\n    const field = get(_fields, name)._f;\n    (field.ref.focus ? field.ref : field.refs[0]).focus();\n  };\n  return {\n    control: {\n      register,\n      unregister,\n      _executeSchema,\n      _getWatch,\n      _getDirty,\n      _updateValid,\n      _removeUnmounted,\n      _updateFieldArray,\n      _getFieldArray,\n      _subjects,\n      _proxyFormState,\n      get _fields() {\n        return _fields;\n      },\n      set _fields(value) {\n        _fields = value;\n      },\n      get _formValues() {\n        return _formValues;\n      },\n      set _formValues(value) {\n        _formValues = value;\n      },\n      get _stateFlags() {\n        return _stateFlags;\n      },\n      set _stateFlags(value) {\n        _stateFlags = value;\n      },\n      get _defaultValues() {\n        return _defaultValues;\n      },\n      set _defaultValues(value) {\n        _defaultValues = value;\n      },\n      get _names() {\n        return _names;\n      },\n      set _names(value) {\n        _names = value;\n      },\n      get _formState() {\n        return _formState;\n      },\n      set _formState(value) {\n        _formState = value;\n      },\n      get _options() {\n        return _options;\n      },\n      set _options(value) {\n        _options = Object.assign(Object.assign({}, _options), value);\n      }\n    },\n    trigger,\n    register,\n    handleSubmit,\n    watch,\n    setValue,\n    getValues,\n    reset,\n    resetField,\n    clearErrors,\n    unregister,\n    setError,\n    setFocus\n  };\n}\nfunction useForm(props = {}) {\n  const _formControl = React.useRef();\n  const [formState, updateFormState] = React.useState({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {}\n  });\n  if (_formControl.current) {\n    _formControl.current.control._options = props;\n  } else {\n    _formControl.current = Object.assign(Object.assign({}, createFormControl(props)), {\n      formState\n    });\n  }\n  const control = _formControl.current.control;\n  useSubscribe({\n    subject: control._subjects.state,\n    callback: formState => {\n      if (shouldRenderFormState(formState, control._proxyFormState, true)) {\n        control._formState = Object.assign(Object.assign({}, control._formState), formState);\n        updateFormState(Object.assign({}, control._formState));\n      }\n    }\n  });\n  React.useEffect(() => {\n    if (!control._stateFlags.mount) {\n      control._proxyFormState.isValid && control._updateValid();\n      control._stateFlags.mount = true;\n    }\n    if (control._stateFlags.watch) {\n      control._stateFlags.watch = false;\n      control._subjects.state.next({});\n    }\n    control._removeUnmounted();\n  });\n  _formControl.current.formState = getProxyFormState(formState, control._proxyFormState);\n  return _formControl.current;\n}\nexport { Controller, FormProvider, appendErrors, get, set, useController, useFieldArray, useForm, useFormContext, useFormState, useWatch };","map":{"version":3,"names":["isCheckBoxInput","element","type","isDateObject","data","Date","isNullOrUndefined","value","isObjectType","isObject","Array","isArray","getControllerValue","event","target","checked","getNodeParentName","name","substring","search","isNameInFieldArray","names","some","current","compact","filter","Boolean","isUndefined","val","undefined","get","obj","path","defaultValue","result","split","reduce","key","EVENTS","BLUR","CHANGE","VALIDATION_MODE","onBlur","onChange","onSubmit","onTouched","all","INPUT_VALIDATION_RULES","max","min","maxLength","minLength","pattern","required","validate","omit","source","copy","Object","assign","HookFormContext","React","createContext","useFormContext","useContext","FormProvider","props","createElement","Provider","children","getProxyFormState","formState","_proxyFormState","localProxyFormState","isRoot","createGetter","prop","defineProperty","isEmptyObject","keys","length","shouldRenderFormState","formStateData","find","convertToArrayPayload","shouldSubscribeByName","signalName","currentName","startsWith","tearDown","_subscription","unsubscribe","updateSubscriptionProps","_props","disabled","subject","subscribe","next","callback","useSubscribe","useRef","useEffect","useFormState","methods","control","updateFormState","useState","_formState","_localProxyFormState","isDirty","dirtyFields","touchedFields","isValidating","isValid","errors","_name","_subjects","state","isString","generateWatchOutput","_names","formValues","isGlobal","watch","add","map","fieldName","watchAll","useWatch","fieldValues","values","_formValues","updateValue","_getWatch","_removeUnmounted","useController","shouldUnregister","_defaultValues","registerProps","register","rules","updateMounted","field","_fields","_f","mount","_shouldUnregisterField","_options","array","_stateFlags","action","unregister","keepDefaultValue","ref","elm","focus","setCustomValidity","message","reportValidity","fieldState","invalid","isTouched","error","Controller","render","appendErrors","validateAllFieldCriteria","types","isKey","test","stringToPath","input","replace","set","object","index","tempPath","lastIndex","newValue","objValue","isNaN","focusFieldBy","fields","fieldsNames","refs","getFocusFieldName","options","shouldFocus","focusName","focusIndex","mapCurrentIds","_fieldIds","keyName","output","generateId","d","performance","now","c","r","Math","random","toString","mapIds","append","fillEmptyArray","insert","slice","moveArrayAt","from","to","splice","omitKeys","prepend","removeAtIndexes","indexes","i","temp","removeArrayAt","sort","a","b","swapArrayAt","indexA","indexB","updateAt","useFieldArray","setFields","_getFieldArray","_actioned","fieldArrayName","updateValues","useCallback","updatedFieldArrayValuesWithKey","updatedFieldArrayValues","append$1","appendValue","_updateFieldArray","argA","prepend$1","remove","insert$1","argB","swap","move","update","watchField","_executeSchema","then","_updateValid","isFunction","cloneObject","Set","createSubject","_observers","observer","push","o","observers","isPrimitive","deepEqual","object1","object2","getTime","keys1","keys2","val1","includes","val2","getValidationModes","mode","isOnSubmit","isOnBlur","isOnChange","isOnAll","isOnTouch","isBoolean","isFileInput","isHTMLElement","HTMLElement","isMultipleSelect","isRadioInput","isRadioOrCheckboxFunction","isWeb","window","document","live","contains","baseGet","updatePath","unset","childObject","previousObjRef","k","objectRef","currentPaths","currentPathsLength","item","defaultResult","validResult","getCheckboxValue","option","attributes","getFieldValueAs","valueAsNumber","valueAsDate","setValueAs","NaN","defaultReturn","getRadioValue","previous","getFieldValue","every","files","selectedOptions","getResolverOptions","criteriaMode","shouldUseNativeValidation","hasValidation","schemaErrorLookup","join","foundError","pop","deepMerge","targetValue","sourceValue","_a","setDirtyFields","defaultValues","parentNode","parentName","setFieldArrayDirtyFields","skipValidation","isBlurEvent","isSubmitted","reValidateMode","unsetEmptyArray","isMessage","isValidElement","isRegex","RegExp","getValidateError","getValueAndMessage","validationData","validateField","inputValue","inputRef","setCustomValidty","isRadio","isCheckBox","isRadioOrCheckbox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","exceedMin","maxOutput","minOutput","valueNumber","parseFloat","valueDate","maxLengthOutput","minLengthOutput","patternValue","match","validateError","validationResult","defaultOptions","shouldFocusError","isWindowUndefined","createFormControl","submitCount","isSubmitting","isSubmitSuccessful","unMount","delayErrorCallback","timer","validateFields","validationModeBeforeSubmit","validationModeAfterSubmit","shouldDisplayAllAssociatedErrors","debounce","wait","args","clearTimeout","setTimeout","isFieldWatched","has","shouldSkipRender","resolver","executeBuildInValidation","method","shouldSetValues","shouldSetFields","updateFieldArrayDirty","_getDirty","updateErrors","updateValidAndValue","shouldSkipSetValueAs","defaultChecked","setFieldValue","updateTouchAndDirty","fieldValue","isCurrentTouched","shouldRender","isFieldDirty","isPreviousFieldTouched","isPreviousFormDirty","isPreviousFieldDirty","isCurrentFieldPristine","shouldRenderByError","previousFieldError","shouldUpdateValid","delayError","updatedFormState","context","executeSchemaAndUpdateState","shouldOnlyCheckValid","valid","fieldReference","fieldError","getValues","forEach","selectRef","selected","checkboxRef","radioRef","shouldDirty","shouldTouch","shouldValidate","trigger","setValues","fieldKey","setValue","isFieldArray","handleChange","shouldSkipValidation","deps","isWatched","previousErrorLookupResult","errorLookupResult","fieldNames","Promise","clearErrors","inputName","setError","info","delete","keepValue","keepError","keepDirty","keepTouched","keepIsValid","fieldRef","querySelectorAll","handleSubmit","onValid","onInvalid","e","preventDefault","persist","hasNoPromiseError","err","resetField","reset","keepStateOptions","updatedValues","cloneUpdatedValues","keepDefaultValues","keepValues","closest","keepSubmitCount","keepIsSubmitted","entries","keepErrors","setFocus","useForm","_formControl"],"sources":["../src/utils/isCheckBoxInput.ts","../src/utils/isDateObject.ts","../src/utils/isNullOrUndefined.ts","../src/utils/isObject.ts","../src/logic/getControllerValue.ts","../src/logic/getNodeParentName.ts","../src/logic/isNameInFieldArray.ts","../src/utils/compact.ts","../src/utils/isUndefined.ts","../src/utils/get.ts","../src/constants.ts","../src/utils/omit.ts","../src/useFormContext.tsx","../src/logic/getProxyFormState.ts","../src/utils/isEmptyObject.ts","../src/logic/shouldRenderFormState.ts","../src/utils/convertToArrayPayload.ts","../src/logic/shouldSubscribeByName.ts","../src/useSubscribe.ts","../src/useFormState.ts","../src/utils/isString.ts","../src/logic/generateWatchOutput.ts","../src/useWatch.ts","../src/useController.ts","../src/controller.tsx","../src/logic/appendErrors.ts","../src/utils/isKey.ts","../src/utils/stringToPath.ts","../src/utils/set.ts","../src/logic/focusFieldBy.ts","../src/logic/getFocusFieldName.ts","../src/logic/mapCurrentIds.ts","../src/logic/generateId.ts","../src/logic/mapId.ts","../src/utils/append.ts","../src/utils/fillEmptyArray.ts","../src/utils/insert.ts","../src/utils/move.ts","../src/utils/omitKeys.ts","../src/utils/prepend.ts","../src/utils/remove.ts","../src/utils/swap.ts","../src/utils/update.ts","../src/useFieldArray.ts","../src/utils/isFunction.ts","../src/utils/cloneObject.ts","../src/utils/createSubject.ts","../src/utils/isPrimitive.ts","../src/utils/deepEqual.ts","../src/utils/getValidationModes.ts","../src/utils/isBoolean.ts","../src/utils/isFileInput.ts","../src/utils/isHTMLElement.ts","../src/utils/isMultipleSelect.ts","../src/utils/isRadioInput.ts","../src/utils/isRadioOrCheckbox.ts","../src/utils/isWeb.ts","../src/utils/live.ts","../src/utils/unset.ts","../src/logic/getCheckboxValue.ts","../src/logic/getFieldValueAs.ts","../src/logic/getRadioValue.ts","../src/logic/getFieldValue.ts","../src/logic/getResolverOptions.ts","../src/logic/hasValidation.ts","../src/logic/schemaErrorLookup.ts","../src/utils/deepMerge.ts","../src/logic/setFieldArrayDirtyFields.ts","../src/logic/skipValidation.ts","../src/logic/unsetEmptyArray.ts","../src/utils/isMessage.ts","../src/utils/isRegex.ts","../src/logic/getValidateError.ts","../src/logic/getValueAndMessage.ts","../src/logic/validateField.ts","../src/logic/createFormControl.ts","../src/useForm.ts"],"sourcesContent":["import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","export default (data: unknown) => data instanceof Date;\n","export default (value: unknown): value is null | undefined => value == null;\n","import isDateObject from './isDateObject';\nimport isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !isDateObject(value);\n","import isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isObject from '../utils/isObject';\n\ntype Event = { target: any };\n\nexport default (event: unknown) =>\n  isObject(event) && (event as Event).target\n    ? isCheckBoxInput((event as Event).target)\n      ? (event as Event).target.checked\n      : (event as Event).target.value\n    : event;\n","export default (name: string) => name.substring(0, name.search(/.\\d/)) || name;\n","import { InternalFieldName } from '../types';\n\nimport getNodeParentName from './getNodeParentName';\n\nexport default (names: Set<InternalFieldName>, name: InternalFieldName) =>\n  [...names].some((current) => getNodeParentName(name) === current);\n","export default (value: any[]) => value.filter(Boolean);\n","export default (val: unknown): val is undefined => val === undefined;\n","import compact from './compact';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\n\nexport default <T>(obj: T, path: string, defaultValue?: unknown) => {\n  if (isObject(obj) && path) {\n    const result = compact(path.split(/[,[\\].]+?/)).reduce(\n      (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n      obj,\n    );\n\n    return isUndefined(result) || result === obj\n      ? isUndefined(obj[path as keyof T])\n        ? defaultValue\n        : obj[path as keyof T]\n      : result;\n  }\n\n  return undefined;\n};\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default <Key extends string, T extends Record<Key, any>>(\n  source: T,\n  key: Key,\n): Omit<T, Key> => {\n  const copy = { ...source };\n  delete copy[key];\n\n  return copy;\n};\n","import * as React from 'react';\n\nimport omit from './utils/omit';\nimport { FieldValues, FormProviderProps, UseFormReturn } from './types';\n\nconst HookFormContext = React.createContext<UseFormReturn | null>(null);\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues,\n>(): UseFormReturn<TFieldValues> =>\n  React.useContext(HookFormContext) as unknown as UseFormReturn<TFieldValues>;\n\nexport const FormProvider = <\n  TFieldValues extends FieldValues,\n  TContext extends object = object,\n>(\n  props: FormProviderProps<TFieldValues, TContext>,\n) => (\n  <HookFormContext.Provider\n    value={omit(props, 'children') as unknown as UseFormReturn}\n  >\n    {props.children}\n  </HookFormContext.Provider>\n);\n","import { VALIDATION_MODE } from '../constants';\nimport { FormState, FormStateProxy, ReadFormState } from '../types';\n\nexport default <TFieldValues>(\n  formState: FormState<TFieldValues>,\n  _proxyFormState: ReadFormState,\n  localProxyFormState?: ReadFormState,\n  isRoot = true,\n) => {\n  function createGetter(prop: keyof FormStateProxy) {\n    return () => {\n      if (prop in formState) {\n        if (_proxyFormState[prop] !== VALIDATION_MODE.all) {\n          _proxyFormState[prop] = !isRoot || VALIDATION_MODE.all;\n        }\n        localProxyFormState && (localProxyFormState[prop] = true);\n        return formState[prop];\n      }\n      return undefined;\n    };\n  }\n\n  const result = {} as any as typeof formState;\n  for (const key in formState) {\n    Object.defineProperty(result, key, {\n      get: createGetter(key as keyof FormStateProxy),\n    });\n  }\n\n  return result;\n};\n","import { EmptyObject } from '../types';\n\nimport isObject from './isObject';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","import { VALIDATION_MODE } from '../constants';\nimport { ReadFormState } from '../types';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport omit from '../utils/omit';\n\nexport default <T extends Record<string, any>, K extends ReadFormState>(\n  formStateData: T,\n  _proxyFormState: K,\n  isRoot?: boolean,\n) => {\n  const formState = omit(formStateData, 'name');\n\n  return (\n    isEmptyObject(formState) ||\n    Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\n    Object.keys(formState).find(\n      (key) =>\n        _proxyFormState[key as keyof ReadFormState] ===\n        (!isRoot || VALIDATION_MODE.all),\n    )\n  );\n};\n","export default <T>(value: T) => (Array.isArray(value) ? value : [value]);\n","import convertToArrayPayload from '../utils/convertToArrayPayload';\n\nexport default <T extends string | string[] | undefined>(\n  name?: T,\n  signalName?: string,\n) =>\n  !name ||\n  !signalName ||\n  name === signalName ||\n  convertToArrayPayload(name).some(\n    (currentName) =>\n      currentName &&\n      (currentName.startsWith(signalName) ||\n        signalName.startsWith(currentName)),\n  );\n","import * as React from 'react';\n\nimport { Subject, Subscription } from './utils/createSubject';\n\ntype Props<T> = {\n  disabled?: boolean;\n  subject: Subject<T>;\n  callback: (value: T) => void;\n};\n\ntype Payload<T> = {\n  _subscription: React.MutableRefObject<Subscription | undefined>;\n  _props: React.MutableRefObject<Props<T>>;\n};\n\nconst tearDown = (\n  _subscription: React.MutableRefObject<Subscription | undefined>,\n) => {\n  if (_subscription.current) {\n    _subscription.current.unsubscribe();\n    _subscription.current = undefined;\n  }\n};\n\nconst updateSubscriptionProps = <T>({ _subscription, _props }: Payload<T>) => {\n  if (_props.current.disabled) {\n    tearDown(_subscription);\n  } else if (!_subscription.current) {\n    _subscription.current = _props.current.subject.subscribe({\n      next: _props.current.callback,\n    });\n  }\n};\n\nexport function useSubscribe<T>(props: Props<T>) {\n  const _subscription = React.useRef<Subscription>();\n  const _props = React.useRef(props);\n  _props.current = props;\n\n  updateSubscriptionProps({\n    _subscription,\n    _props,\n  });\n\n  React.useEffect(() => {\n    updateSubscriptionProps({\n      _subscription,\n      _props,\n    });\n\n    return () => tearDown(_subscription);\n  }, []);\n}\n","import * as React from 'react';\n\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport shouldSubscribeByName from './logic/shouldSubscribeByName';\nimport {\n  FieldValues,\n  InternalFieldName,\n  UseFormStateProps,\n  UseFormStateReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useSubscribe } from './useSubscribe';\n\nfunction useFormState<TFieldValues extends FieldValues = FieldValues>(\n  props?: UseFormStateProps<TFieldValues>,\n): UseFormStateReturn<TFieldValues> {\n  const methods = useFormContext<TFieldValues>();\n  const { control = methods.control, disabled, name } = props || {};\n  const [formState, updateFormState] = React.useState(control._formState);\n  const _localProxyFormState = React.useRef({\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  });\n  const _name = React.useRef(name);\n\n  _name.current = name;\n\n  useSubscribe({\n    disabled,\n    callback: (formState) =>\n      shouldSubscribeByName(\n        _name.current as InternalFieldName,\n        formState.name,\n      ) &&\n      shouldRenderFormState(formState, _localProxyFormState.current) &&\n      updateFormState({\n        ...control._formState,\n        ...formState,\n      }),\n    subject: control._subjects.state,\n  });\n\n  return getProxyFormState(\n    formState,\n    control._proxyFormState,\n    _localProxyFormState.current,\n    false,\n  );\n}\n\nexport { useFormState };\n","export default (value: unknown): value is string => typeof value === 'string';\n","import { FieldValues, InternalFieldName, Names } from '../types';\nimport get from '../utils/get';\nimport isString from '../utils/isString';\n\nexport function generateWatchOutput(\n  names: string | string[] | undefined,\n  _names: Names,\n  formValues?: FieldValues,\n  isGlobal?: boolean,\n) {\n  const isArray = Array.isArray(names);\n  if (isString(names)) {\n    isGlobal && _names.watch.add(names as InternalFieldName);\n    return get(formValues, names as InternalFieldName);\n  }\n\n  if (isArray) {\n    return names.map(\n      (fieldName) => (\n        isGlobal && _names.watch.add(fieldName as InternalFieldName),\n        get(formValues, fieldName as InternalFieldName)\n      ),\n    );\n  }\n\n  isGlobal && (_names.watchAll = true);\n  return formValues;\n}\n","import * as React from 'react';\n\nimport { generateWatchOutput } from './logic/generateWatchOutput';\nimport shouldSubscribeByName from './logic/shouldSubscribeByName';\nimport isUndefined from './utils/isUndefined';\nimport {\n  Control,\n  DeepPartialSkipArrayKey,\n  FieldPath,\n  FieldPathValue,\n  FieldPathValues,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n  UseWatchProps,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useSubscribe } from './useSubscribe';\n\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n>(props: {\n  defaultValue?: UnpackNestedValue<DeepPartialSkipArrayKey<TFieldValues>>;\n  control?: Control<TFieldValues>;\n  disabled?: boolean;\n}): UnpackNestedValue<DeepPartialSkipArrayKey<TFieldValues>>;\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(props: {\n  name: TFieldName;\n  defaultValue?: FieldPathValue<TFieldValues, TFieldName>;\n  control?: Control<TFieldValues>;\n  disabled?: boolean;\n}): FieldPathValue<TFieldValues, TFieldName>;\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldNames extends readonly FieldPath<TFieldValues>[] = readonly FieldPath<TFieldValues>[],\n>(props: {\n  name: TFieldNames;\n  defaultValue?: UnpackNestedValue<DeepPartialSkipArrayKey<TFieldValues>>;\n  control?: Control<TFieldValues>;\n  disabled?: boolean;\n}): FieldPathValues<TFieldValues, TFieldNames>;\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldNames extends FieldPath<TFieldValues>[] = FieldPath<TFieldValues>[],\n>(): FieldPathValues<TFieldValues, TFieldNames>;\nexport function useWatch<TFieldValues>(props?: UseWatchProps<TFieldValues>) {\n  const methods = useFormContext();\n  const {\n    control = methods.control,\n    name,\n    defaultValue,\n    disabled,\n  } = props || {};\n  const _name = React.useRef(name);\n\n  _name.current = name;\n\n  useSubscribe({\n    disabled,\n    subject: control._subjects.watch,\n    callback: (formState) => {\n      if (\n        shouldSubscribeByName(\n          _name.current as InternalFieldName,\n          formState.name,\n        )\n      ) {\n        const fieldValues = generateWatchOutput(\n          _name.current as InternalFieldName | InternalFieldName[],\n          control._names,\n          formState.values || control._formValues,\n        );\n\n        updateValue(\n          isUndefined(_name.current)\n            ? { ...fieldValues }\n            : Array.isArray(fieldValues)\n            ? [...fieldValues]\n            : fieldValues,\n        );\n      }\n    },\n  });\n\n  const [value, updateValue] = React.useState<unknown>(\n    isUndefined(defaultValue)\n      ? control._getWatch(name as InternalFieldName)\n      : defaultValue,\n  );\n\n  React.useEffect(() => {\n    control._removeUnmounted();\n  });\n\n  return value;\n}\n","import * as React from 'react';\n\nimport getControllerValue from './logic/getControllerValue';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport get from './utils/get';\nimport { EVENTS } from './constants';\nimport {\n  Field,\n  FieldPath,\n  FieldValues,\n  InternalFieldName,\n  UseControllerProps,\n  UseControllerReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useFormState } from './useFormState';\nimport { useWatch } from './useWatch';\n\nexport function useController<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(\n  props: UseControllerProps<TFieldValues, TName>,\n): UseControllerReturn<TFieldValues, TName> {\n  const methods = useFormContext<TFieldValues>();\n  const { name, control = methods.control, shouldUnregister } = props;\n  const value = useWatch({\n    control,\n    name,\n    defaultValue: get(\n      control._formValues,\n      name,\n      get(control._defaultValues, name, props.defaultValue),\n    ),\n  });\n  const formState = useFormState({\n    control,\n    name,\n  });\n  const _name = React.useRef(name);\n\n  _name.current = name;\n\n  const registerProps = control.register(name, {\n    ...props.rules,\n    value,\n  });\n\n  React.useEffect(() => {\n    const updateMounted = (name: InternalFieldName, value: boolean) => {\n      const field: Field = get(control._fields, name);\n\n      if (field) {\n        field._f.mount = value;\n      }\n    };\n\n    updateMounted(name, true);\n\n    return () => {\n      const _shouldUnregisterField =\n        control._options.shouldUnregister || shouldUnregister;\n\n      if (\n        isNameInFieldArray(control._names.array, name)\n          ? _shouldUnregisterField && !control._stateFlags.action\n          : _shouldUnregisterField\n      ) {\n        control.unregister(name, { keepDefaultValue: true });\n      } else {\n        updateMounted(name, false);\n      }\n    };\n  }, [name, control, shouldUnregister]);\n\n  return {\n    field: {\n      onChange: (event) => {\n        registerProps.onChange({\n          target: {\n            value: getControllerValue(event),\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.CHANGE,\n        });\n      },\n      onBlur: () => {\n        registerProps.onBlur({\n          target: {\n            value,\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.BLUR,\n        });\n      },\n      name,\n      value,\n      ref: (elm) => {\n        const field = get(control._fields, name);\n\n        if (elm && field && elm.focus) {\n          field._f.ref = {\n            focus: () => elm.focus(),\n            setCustomValidity: (message: string) =>\n              elm.setCustomValidity(message),\n            reportValidity: () => elm.reportValidity(),\n          };\n        }\n      },\n    },\n    formState,\n    fieldState: {\n      invalid: !!get(formState.errors, name),\n      isDirty: !!get(formState.dirtyFields, name),\n      isTouched: !!get(formState.touchedFields, name),\n      error: get(formState.errors, name),\n    },\n  };\n}\n","import { ControllerProps, FieldPath, FieldValues } from './types';\nimport { useController } from './useController';\n\nconst Controller = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(\n  props: ControllerProps<TFieldValues, TName>,\n) => props.render(useController<TFieldValues, TName>(props));\n\nexport { Controller };\n","import {\n  InternalFieldErrors,\n  InternalFieldName,\n  ValidateResult,\n} from '../types';\n\nexport default (\n  name: InternalFieldName,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","export default (value: string) => /^\\w*$/.test(value);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n","import { FieldValues } from '../types';\n\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport stringToPath from './stringToPath';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import { FieldRefs, InternalFieldName } from '../types';\nimport { get } from '../utils';\nimport isObject from '../utils/isObject';\nimport isUndefined from '../utils/isUndefined';\nimport omit from '../utils/omit';\n\nconst focusFieldBy = (\n  fields: FieldRefs,\n  callback: (name: string) => boolean,\n  fieldsNames?: Set<InternalFieldName> | InternalFieldName[],\n) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n\n    if (field) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      if (_f && callback(_f.name)) {\n        if (_f.ref.focus && isUndefined(_f.ref.focus())) {\n          break;\n        } else if (_f.refs) {\n          _f.refs[0].focus();\n          break;\n        }\n      } else if (isObject(current)) {\n        focusFieldBy(current, callback);\n      }\n    }\n  }\n};\n\nexport default focusFieldBy;\n","import { FieldArrayMethodProps, InternalFieldName } from '../types';\nimport isUndefined from '../utils/isUndefined';\n\nexport default (\n  name: InternalFieldName,\n  index: number,\n  options: FieldArrayMethodProps = {},\n): string =>\n  options.shouldFocus || isUndefined(options.shouldFocus)\n    ? options.focusName ||\n      `${name}.${isUndefined(options.focusIndex) ? index : options.focusIndex}.`\n    : '';\n","import * as React from 'react';\n\nimport { FieldValues } from '../types';\n\nexport default <T, K>(\n  values: T[],\n  _fieldIds: React.MutableRefObject<K>,\n  keyName: string,\n) =>\n  values.map((value, index) => {\n    const output = _fieldIds.current[index as keyof K];\n\n    return {\n      ...value,\n      ...(output ? { [keyName]: (output as FieldValues)[keyName] } : {}),\n    };\n  });\n","export default () => {\n  const d =\n    typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\n\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (Math.random() * 16 + d) % 16 | 0;\n\n    return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n};\n","import { FieldArrayPath, FieldArrayWithId, FieldValues } from '../types';\n\nimport generateId from './generateId';\n\nexport default <\n  TFieldArrayValues extends FieldValues = FieldValues,\n  TFieldName extends FieldArrayPath<TFieldArrayValues> = FieldArrayPath<TFieldArrayValues>,\n  TKeyName extends string = 'id',\n>(\n  values: Partial<TFieldArrayValues>[] = [],\n  keyName: TKeyName,\n): Partial<FieldArrayWithId<TFieldArrayValues, TFieldName, TKeyName>>[] =>\n  values.map((value: Partial<TFieldArrayValues>) => ({\n    ...(value[keyName] ? {} : { [keyName]: generateId() }),\n    ...value,\n  })) as Partial<FieldArrayWithId<TFieldArrayValues, TFieldName, TKeyName>>[];\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function append<T>(data: T[], value: T | T[]): T[] {\n  return [...convertToArrayPayload(data), ...convertToArrayPayload(value)];\n}\n","export default <T>(value: T | T[]): undefined[] | undefined =>\n  Array.isArray(value) ? value.map(() => undefined) : undefined;\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function insert<T>(data: T[], index: number): (T | undefined)[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value: T | T[],\n): T[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value?: T | T[],\n): (T | undefined)[] {\n  return [\n    ...data.slice(0, index),\n    ...convertToArrayPayload(value),\n    ...data.slice(index),\n  ];\n}\n","import isUndefined from './isUndefined';\n\nexport default <T>(\n  data: (T | undefined)[],\n  from: number,\n  to: number,\n): (T | undefined)[] => {\n  if (Array.isArray(data)) {\n    if (isUndefined(data[to])) {\n      data[to] = undefined;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n  }\n\n  return [];\n};\n","import { FieldArrayWithId } from '../types';\n\nimport omit from './omit';\n\nexport default <T extends Partial<FieldArrayWithId>[]>(\n  fields: T,\n  keyName: string,\n) => fields.map((field = {}) => omit(field, keyName));\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function prepend<T>(data: T[], value: T | T[]): T[] {\n  return [...convertToArrayPayload(value), ...convertToArrayPayload(data)];\n}\n","import compact from './compact';\nimport convertToArrayPayload from './convertToArrayPayload';\nimport isUndefined from './isUndefined';\n\nfunction removeAtIndexes<T>(data: T[], indexes: number[]): T[] {\n  let i = 0;\n  const temp = [...data];\n\n  for (const index of indexes) {\n    temp.splice(index - i, 1);\n    i++;\n  }\n\n  return compact(temp).length ? temp : [];\n}\n\nexport default <T>(data: T[], index?: number | number[]): T[] =>\n  isUndefined(index)\n    ? []\n    : removeAtIndexes(\n        data,\n        (convertToArrayPayload(index) as number[]).sort((a, b) => a - b),\n      );\n","export default <T>(data: T[], indexA: number, indexB: number): void => {\n  data[indexA] = [data[indexB], (data[indexB] = data[indexA])][0];\n};\n","export default <T>(fieldValues: T[], index: number, value: any) => {\n  fieldValues[index] = value;\n  return fieldValues;\n};\n","import * as React from 'react';\n\nimport focusFieldBy from './logic/focusFieldBy';\nimport getFocusFieldName from './logic/getFocusFieldName';\nimport mapCurrentIds from './logic/mapCurrentIds';\nimport mapIds from './logic/mapId';\nimport appendAt from './utils/append';\nimport convertToArrayPayload from './utils/convertToArrayPayload';\nimport fillEmptyArray from './utils/fillEmptyArray';\nimport get from './utils/get';\nimport insertAt from './utils/insert';\nimport moveArrayAt from './utils/move';\nimport omitKeys from './utils/omitKeys';\nimport prependAt from './utils/prepend';\nimport removeArrayAt from './utils/remove';\nimport set from './utils/set';\nimport swapArrayAt from './utils/swap';\nimport updateAt from './utils/update';\nimport {\n  FieldArray,\n  FieldArrayMethodProps,\n  FieldArrayPath,\n  FieldArrayWithId,\n  FieldErrors,\n  FieldPath,\n  FieldValues,\n  UseFieldArrayProps,\n  UseFieldArrayReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useSubscribe } from './useSubscribe';\n\nexport const useFieldArray = <\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldArrayName extends FieldArrayPath<TFieldValues> = FieldArrayPath<TFieldValues>,\n  TKeyName extends string = 'id',\n>(\n  props: UseFieldArrayProps<TFieldValues, TFieldArrayName, TKeyName>,\n): UseFieldArrayReturn<TFieldValues, TFieldArrayName, TKeyName> => {\n  const methods = useFormContext();\n  const {\n    control = methods.control,\n    name,\n    keyName = 'id' as TKeyName,\n    shouldUnregister,\n  } = props;\n  const [fields, setFields] = React.useState<\n    Partial<FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>>[]\n  >(mapIds(control._getFieldArray(name), keyName));\n  const _fieldIds = React.useRef(fields);\n  const _name = React.useRef(name);\n  const _actioned = React.useRef(false);\n\n  _name.current = name;\n  _fieldIds.current = fields;\n  control._names.array.add(name);\n\n  useSubscribe({\n    callback: ({ values, name: fieldArrayName }) => {\n      if (fieldArrayName === _name.current || !fieldArrayName) {\n        setFields(mapIds(get(values, _name.current), keyName));\n      }\n    },\n    subject: control._subjects.array,\n  });\n\n  const updateValues = React.useCallback(\n    <\n      T extends Partial<\n        FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n      >[],\n    >(\n      updatedFieldArrayValuesWithKey: T,\n    ) => {\n      const updatedFieldArrayValues = omitKeys(\n        updatedFieldArrayValuesWithKey,\n        keyName,\n      );\n      _actioned.current = true;\n      set(control._formValues, name, updatedFieldArrayValues);\n      return updatedFieldArrayValues;\n    },\n    [control, name, keyName],\n  );\n\n  const append = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const appendValue = convertToArrayPayload(value);\n    const updatedFieldArrayValuesWithKey = appendAt(\n      mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName),\n      mapIds(appendValue, keyName),\n    );\n    control._updateFieldArray(\n      name,\n      appendAt,\n      {\n        argA: fillEmptyArray(value),\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n    );\n    setFields(updatedFieldArrayValuesWithKey);\n\n    control._names.focus = getFocusFieldName(\n      name,\n      updatedFieldArrayValuesWithKey.length - appendValue.length,\n      options,\n    );\n  };\n\n  const prepend = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const updatedFieldArrayValuesWithKey = prependAt(\n      mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName),\n      mapIds(convertToArrayPayload(value), keyName),\n    );\n    control._updateFieldArray(\n      name,\n      prependAt,\n      {\n        argA: fillEmptyArray(value),\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n    );\n    setFields(updatedFieldArrayValuesWithKey);\n\n    control._names.focus = getFocusFieldName(name, 0, options);\n  };\n\n  const remove = (index?: number | number[]) => {\n    const updatedFieldArrayValuesWithKey: Partial<\n      FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n    >[] = removeArrayAt(\n      mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName),\n      index,\n    );\n    control._updateFieldArray(\n      name,\n      removeArrayAt,\n      {\n        argA: index,\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n    );\n    setFields(updatedFieldArrayValuesWithKey);\n  };\n\n  const insert = (\n    index: number,\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const updatedFieldArrayValuesWithKey = insertAt(\n      mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName),\n      index,\n      mapIds(convertToArrayPayload(value), keyName),\n    );\n    control._updateFieldArray(\n      name,\n      insertAt,\n      {\n        argA: index,\n        argB: fillEmptyArray(value),\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n    );\n    setFields(updatedFieldArrayValuesWithKey);\n\n    control._names.focus = getFocusFieldName(name, index, options);\n  };\n\n  const swap = (indexA: number, indexB: number) => {\n    const updatedFieldArrayValuesWithKey = mapCurrentIds(\n      control._getFieldArray(name),\n      _fieldIds,\n      keyName,\n    );\n    swapArrayAt(updatedFieldArrayValuesWithKey, indexA, indexB);\n    control._updateFieldArray(\n      name,\n      swapArrayAt,\n      {\n        argA: indexA,\n        argB: indexB,\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n      false,\n    );\n    setFields(updatedFieldArrayValuesWithKey);\n  };\n\n  const move = (from: number, to: number) => {\n    const updatedFieldArrayValuesWithKey = mapCurrentIds(\n      control._getFieldArray(name),\n      _fieldIds,\n      keyName,\n    );\n    moveArrayAt(updatedFieldArrayValuesWithKey, from, to);\n    control._updateFieldArray(\n      name,\n      moveArrayAt,\n      {\n        argA: from,\n        argB: to,\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n      false,\n    );\n    setFields(updatedFieldArrayValuesWithKey);\n  };\n\n  const update = (\n    index: number,\n    value: Partial<FieldArray<TFieldValues, TFieldArrayName>>,\n  ) => {\n    const updatedFieldArrayValuesWithKey = mapCurrentIds(\n      control._getFieldArray(name),\n      _fieldIds,\n      keyName,\n    );\n    const updatedFieldArrayValues = updateAt(\n      updatedFieldArrayValuesWithKey,\n      index,\n      value,\n    );\n    _fieldIds.current = mapIds(updatedFieldArrayValues, keyName);\n    control._updateFieldArray(\n      name,\n      updateAt,\n      {\n        argA: index,\n        argB: value,\n      },\n      updateValues(_fieldIds.current),\n      true,\n      false,\n    );\n    setFields(_fieldIds.current);\n  };\n\n  const replace = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n  ) => {\n    const updatedFieldArrayValuesWithKey: Partial<\n      FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n    >[] = mapIds(convertToArrayPayload(value), keyName);\n    control._updateFieldArray(\n      name,\n      () => updatedFieldArrayValuesWithKey,\n      {},\n      updateValues(updatedFieldArrayValuesWithKey),\n      true,\n      false,\n    );\n    setFields(updatedFieldArrayValuesWithKey);\n  };\n\n  React.useEffect(() => {\n    control._stateFlags.action = false;\n\n    if (control._names.watchAll) {\n      control._subjects.state.next({});\n    } else {\n      for (const watchField of control._names.watch) {\n        if (name.startsWith(watchField)) {\n          control._subjects.state.next({});\n          break;\n        }\n      }\n    }\n\n    if (_actioned.current) {\n      control._executeSchema([name]).then((result) => {\n        const error = get(result.errors, name);\n\n        if (error && error.type && !get(control._formState.errors, name)) {\n          set(control._formState.errors, name, error);\n          control._subjects.state.next({\n            errors: control._formState.errors as FieldErrors<TFieldValues>,\n          });\n        }\n      });\n    }\n\n    control._subjects.watch.next({\n      name,\n      values: control._formValues,\n    });\n\n    control._names.focus &&\n      focusFieldBy(control._fields, (key: string) =>\n        key.startsWith(control._names.focus),\n      );\n\n    control._names.focus = '';\n\n    control._proxyFormState.isValid && control._updateValid();\n  }, [fields, name, control, keyName]);\n\n  React.useEffect(() => {\n    !get(control._formValues, name) && set(control._formValues, name, []);\n\n    return () => {\n      if (control._options.shouldUnregister || shouldUnregister) {\n        control.unregister(name as FieldPath<TFieldValues>);\n      }\n    };\n  }, [name, control, keyName, shouldUnregister]);\n\n  return {\n    swap: React.useCallback(swap, [updateValues, name, control, keyName]),\n    move: React.useCallback(move, [updateValues, name, control, keyName]),\n    prepend: React.useCallback(prepend, [updateValues, name, control, keyName]),\n    append: React.useCallback(append, [updateValues, name, control, keyName]),\n    remove: React.useCallback(remove, [updateValues, name, control, keyName]),\n    insert: React.useCallback(insert, [updateValues, name, control, keyName]),\n    update: React.useCallback(update, [updateValues, name, control, keyName]),\n    replace: React.useCallback(replace, [updateValues, name, control, keyName]),\n    fields: fields as FieldArrayWithId<\n      TFieldValues,\n      TFieldArrayName,\n      TKeyName\n    >[],\n  };\n};\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import isFunction from './isFunction';\nimport isObject from './isObject';\n\nexport default function cloneObject<T>(data: T): T {\n  let copy: any;\n  const isArray = Array.isArray(data);\n\n  if (data instanceof Date) {\n    copy = new Date(data);\n  } else if (data instanceof Set) {\n    copy = new Set(data);\n  } else if (isArray || isObject(data)) {\n    copy = isArray ? [] : {};\n    for (const key in data) {\n      if (isFunction(data[key])) {\n        copy = data;\n        break;\n      }\n      copy[key] = cloneObject(data[key]);\n    }\n  } else {\n    return data;\n  }\n\n  return copy;\n}\n","import { Noop } from '../types';\n\nexport type Observer<T> = {\n  next: (value: T) => void;\n};\n\nexport type Subscription = {\n  unsubscribe: Noop;\n};\n\nexport type Subject<T> = {\n  readonly observers: Observer<T>[];\n  subscribe: (value: Observer<T>) => Subscription;\n  unsubscribe: Noop;\n} & Observer<T>;\n\nexport default function createSubject<T>(): Subject<T> {\n  let _observers: Observer<T>[] = [];\n\n  const next = (value: T) => {\n    for (const observer of _observers) {\n      observer.next(value);\n    }\n  };\n\n  const subscribe = (observer: Observer<T>): Subscription => {\n    _observers.push(observer);\n    return {\n      unsubscribe: () => {\n        _observers = _observers.filter((o) => o !== observer);\n      },\n    };\n  };\n\n  const unsubscribe = () => {\n    _observers = [];\n  };\n\n  return {\n    get observers() {\n      return _observers;\n    },\n    next,\n    subscribe,\n    unsubscribe,\n  };\n}\n","import { Primitive } from '../types';\n\nimport isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isObject from '../utils/isObject';\n\nimport isDateObject from './isDateObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(object1: any, object2: any) {\n  if (isPrimitive(object1) || isPrimitive(object2)) {\n    return object1 === object2;\n  }\n\n  if (isDateObject(object1) && isDateObject(object2)) {\n    return object1.getTime() === object2.getTime();\n  }\n\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    const val1 = object1[key];\n\n    if (!keys2.includes(key)) {\n      return false;\n    }\n\n    if (key !== 'ref') {\n      const val2 = object2[key];\n\n      if (\n        (isDateObject(val1) && isDateObject(val2)) ||\n        (isObject(val1) && isObject(val2)) ||\n        (Array.isArray(val1) && Array.isArray(val2))\n          ? !deepEqual(val1, val2)\n          : val1 !== val2\n      ) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `select-multiple`;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types';\n\nimport isCheckBoxInput from './isCheckBoxInput';\nimport isRadioInput from './isRadioInput';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","export default typeof window !== 'undefined' &&\n  typeof window.HTMLElement !== 'undefined' &&\n  typeof document !== 'undefined';\n","import { Ref } from '../types';\n\nimport isHTMLElement from './isHTMLElement';\n\nexport default (ref: Ref) => isHTMLElement(ref) && document.contains(ref);\n","import isBoolean from './isBoolean';\nimport isEmptyObject from './isEmptyObject';\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport stringToPath from './stringToPath';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import isUndefined from '../utils/isUndefined';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean | undefined;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: HTMLInputElement[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.checked && !option.disabled)\n        .map((option) => option.value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    return options[0].checked && !options[0].disabled\n      ? // @ts-expect-error expected to work in the browser\n        options[0].attributes && !isUndefined(options[0].attributes.value)\n        ? isUndefined(options[0].value) || options[0].value === ''\n          ? validResult\n          : { value: options[0].value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import { Field } from '../types';\nimport isUndefined from '../utils/isUndefined';\n\nexport default (\n  value: any,\n  { valueAsNumber, valueAsDate, setValueAs }: Field['_f'],\n) =>\n  isUndefined(value)\n    ? value\n    : valueAsNumber\n    ? value === ''\n      ? NaN\n      : +value\n    : valueAsDate\n    ? new Date(value)\n    : setValueAs\n    ? setValueAs(value)\n    : value;\n","type RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: HTMLInputElement[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.checked && !option.disabled\n            ? {\n                isValid: true,\n                value: option.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { Field } from '../types';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isFileInput from '../utils/isFileInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isRadioInput from '../utils/isRadioInput';\nimport isUndefined from '../utils/isUndefined';\n\nimport getCheckboxValue from './getCheckboxValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getRadioValue from './getRadioValue';\n\nexport default function getFieldValue(_f: Field['_f']) {\n  const ref = _f.ref;\n\n  if (_f.refs ? _f.refs.every((ref) => ref.disabled) : ref.disabled) {\n    return;\n  }\n\n  if (isFileInput(ref)) {\n    return ref.files;\n  }\n\n  if (isRadioInput(ref)) {\n    return getRadioValue(_f.refs).value;\n  }\n\n  if (isMultipleSelect(ref)) {\n    return [...ref.selectedOptions].map(({ value }) => value);\n  }\n\n  if (isCheckBox(ref)) {\n    return getCheckboxValue(_f.refs).value;\n  }\n\n  return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\n","import {\n  CriteriaMode,\n  Field,\n  FieldName,\n  FieldRefs,\n  InternalFieldName,\n} from '../types';\nimport { get } from '../utils';\nimport set from '../utils/set';\n\nexport default <TFieldValues>(\n  fieldsNames: Set<InternalFieldName> | InternalFieldName[],\n  _fields: FieldRefs,\n  criteriaMode?: CriteriaMode,\n  shouldUseNativeValidation?: boolean | undefined,\n) => {\n  const fields: Record<InternalFieldName, Field['_f']> = {};\n\n  for (const name of fieldsNames) {\n    const field: Field = get(_fields, name);\n\n    field && set(fields, name, field._f);\n  }\n\n  return {\n    criteriaMode,\n    names: [...fieldsNames] as FieldName<TFieldValues>[],\n    fields,\n    shouldUseNativeValidation,\n  };\n};\n","import { Field } from '../types';\n\nexport default (options: Field['_f']) =>\n  options.mount &&\n  (options.required ||\n    options.min ||\n    options.max ||\n    options.maxLength ||\n    options.minLength ||\n    options.pattern ||\n    options.validate);\n","import { FieldError, FieldErrors, FieldValues } from '../types';\nimport get from '../utils/get';\nimport isKey from '../utils/isKey';\n\nexport default function schemaErrorLookup(\n  errors: FieldErrors,\n  _fields: FieldValues,\n  name: string,\n): {\n  error?: FieldError;\n  name: string;\n} {\n  const error = get(errors, name);\n\n  if (error || isKey(name)) {\n    return {\n      error,\n      name,\n    };\n  }\n\n  const names = name.split('.');\n\n  while (names.length) {\n    const fieldName = names.join('.');\n    const field = get(_fields, fieldName);\n    const foundError = get(errors, fieldName);\n\n    if (field && !Array.isArray(field) && name !== fieldName) {\n      return { name };\n    }\n\n    if (foundError && foundError.type) {\n      return {\n        name: fieldName,\n        error: foundError,\n      };\n    }\n\n    names.pop();\n  }\n\n  return {\n    name,\n  };\n}\n","import isObject from './isObject';\nimport isPrimitive from './isPrimitive';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>,\n>(target: T, source: U): T & U {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      target[key] =\n        (isObject(targetValue) && isObject(sourceValue)) ||\n        (Array.isArray(targetValue) && Array.isArray(sourceValue))\n          ? deepMerge(targetValue, sourceValue)\n          : sourceValue;\n    } catch {}\n  }\n\n  return target;\n}\n","import { get } from '../utils';\nimport deepEqual from '../utils/deepEqual';\nimport { deepMerge } from '../utils/deepMerge';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport set from '../utils/set';\n\nfunction setDirtyFields<\n  T extends Record<string, unknown>[],\n  U extends Record<string, unknown>[],\n  K extends Record<string, boolean | []>,\n>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n  parentNode?: K,\n  parentName?: keyof K,\n) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setDirtyFields(\n          values[index][key] as T,\n          get(defaultValues[index] || {}, key, []),\n          dirtyFields[index][key] as [],\n          dirtyFields[index],\n          key,\n        );\n      } else {\n        !isNullOrUndefined(defaultValues) &&\n        deepEqual(get(defaultValues[index] || {}, key), values[index][key])\n          ? set(dirtyFields[index] || {}, key)\n          : (dirtyFields[index] = {\n              ...dirtyFields[index],\n              [key]: true,\n            });\n      }\n    }\n\n    parentNode &&\n      !dirtyFields.length &&\n      delete parentNode[parentName as keyof K];\n  }\n\n  return dirtyFields;\n}\n\nexport default <T extends U, U extends Record<string, unknown>[]>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n) =>\n  deepMerge(\n    setDirtyFields(values, defaultValues, dirtyFields.slice(0, values.length)),\n    setDirtyFields(defaultValues, values, dirtyFields.slice(0, values.length)),\n  );\n","export default (\n  isBlurEvent: boolean,\n  isTouched: boolean,\n  isSubmitted: boolean,\n  reValidateMode: {\n    isOnBlur: boolean;\n    isOnChange: boolean;\n  },\n  mode: Partial<{\n    isOnSubmit: boolean;\n    isOnBlur: boolean;\n    isOnChange: boolean;\n    isOnTouch: boolean;\n    isOnAll: boolean;\n  }>,\n) => {\n  if (mode.isOnAll) {\n    return false;\n  } else if (!isSubmitted && mode.isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","import compact from '../utils/compact';\nimport get from '../utils/get';\nimport unset from '../utils/unset';\n\nexport default <T>(ref: T, name: string) =>\n  !compact(get(ref, name, [])).length && unset(ref, name);\n","import * as React from 'react';\n\nimport { Message } from '../types';\nimport isString from '../utils/isString';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import { FieldError, Ref, ValidateResult } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (\n    isMessage(result) ||\n    (Array.isArray(result) && result.every(isMessage)) ||\n    (isBoolean(result) && !result)\n  ) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import { ValidationRule } from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","import { INPUT_VALIDATION_RULES } from '../constants';\nimport { Field, FieldError, InternalFieldErrors, Message } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isMessage from '../utils/isMessage';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isRadioInput from '../utils/isRadioInput';\nimport isRegex from '../utils/isRegex';\nimport isString from '../utils/isString';\n\nimport appendErrors from './appendErrors';\nimport getCheckboxValue from './getCheckboxValue';\nimport getRadioValue from './getRadioValue';\nimport getValidateError from './getValidateError';\nimport getValueAndMessage from './getValueAndMessage';\n\nexport default async (\n  field: Field,\n  inputValue: any,\n  validateAllFieldCriteria: boolean,\n  shouldUseNativeValidation?: boolean,\n): Promise<InternalFieldErrors> => {\n  const {\n    ref,\n    refs,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n    name,\n    valueAsNumber,\n    mount,\n    disabled,\n  } = field._f;\n  if (!mount || disabled) {\n    return {};\n  }\n  const inputRef: HTMLInputElement = refs ? refs[0] : (ref as HTMLInputElement);\n  const setCustomValidty = (message?: string | boolean) => {\n    if (shouldUseNativeValidation && inputRef.reportValidity) {\n      inputRef.setCustomValidity(isBoolean(message) ? '' : message || ' ');\n      inputRef.reportValidity();\n    }\n  };\n  const error: InternalFieldErrors = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty =\n    ((valueAsNumber || isFileInput(ref)) && !ref.value) ||\n    inputValue === '' ||\n    (Array.isArray(inputValue) && !inputValue.length);\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n      (isBoolean(inputValue) && !inputValue) ||\n      (isCheckBox && !getCheckboxValue(refs).isValid) ||\n      (isRadio && !getRadioValue(refs).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: inputRef,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(message);\n        return error;\n      }\n    }\n  }\n\n  if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNaN(inputValue)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(inputValue);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(inputValue);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if ((maxLength || minLength) && !isEmpty && isString(inputValue)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      inputValue.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      inputValue.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty && isString(inputValue)) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(message);\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    if (isFunction(validate)) {\n      const result = await validate(inputValue);\n      const validateError = getValidateError(result, inputRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          setCustomValidty(validateError.message);\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n\n      for (const key in validate) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateError = getValidateError(\n          await validate[key](inputValue),\n          inputRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          setCustomValidty(validateError.message);\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: inputRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  setCustomValidty(true);\n  return error;\n};\n","import { EVENTS, VALIDATION_MODE } from '../constants';\nimport {\n  BatchFieldArrayUpdate,\n  ChangeHandler,\n  DeepPartial,\n  DelayCallback,\n  Field,\n  FieldError,\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldPath,\n  FieldRefs,\n  FieldValues,\n  FormState,\n  GetIsDirty,\n  InternalFieldName,\n  Names,\n  Path,\n  PathValue,\n  Ref,\n  ResolverResult,\n  SetFieldValue,\n  SetValueConfig,\n  Subjects,\n  UnpackNestedValue,\n  UseFormClearErrors,\n  UseFormGetValues,\n  UseFormHandleSubmit,\n  UseFormProps,\n  UseFormRegister,\n  UseFormRegisterReturn,\n  UseFormReset,\n  UseFormResetField,\n  UseFormReturn,\n  UseFormSetError,\n  UseFormSetFocus,\n  UseFormSetValue,\n  UseFormTrigger,\n  UseFormUnregister,\n  UseFormWatch,\n  WatchInternal,\n  WatchObserver,\n} from '../types';\nimport { set } from '../utils';\nimport cloneObject from '../utils/cloneObject';\nimport compact from '../utils/compact';\nimport convertToArrayPayload from '../utils/convertToArrayPayload';\nimport createSubject from '../utils/createSubject';\nimport deepEqual from '../utils/deepEqual';\nimport get from '../utils/get';\nimport getValidationModes from '../utils/getValidationModes';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDateObject from '../utils/isDateObject';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isHTMLElement from '../utils/isHTMLElement';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isPrimitive from '../utils/isPrimitive';\nimport isRadioOrCheckboxFunction from '../utils/isRadioOrCheckbox';\nimport isString from '../utils/isString';\nimport isUndefined from '../utils/isUndefined';\nimport isWeb from '../utils/isWeb';\nimport live from '../utils/live';\nimport omit from '../utils/omit';\nimport unset from '../utils/unset';\n\nimport focusFieldBy from './focusFieldBy';\nimport { generateWatchOutput } from './generateWatchOutput';\nimport getFieldValue from './getFieldValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getResolverOptions from './getResolverOptions';\nimport hasValidation from './hasValidation';\nimport isNameInFieldArray from './isNameInFieldArray';\nimport schemaErrorLookup from './schemaErrorLookup';\nimport setFieldArrayDirtyFields from './setFieldArrayDirtyFields';\nimport skipValidation from './skipValidation';\nimport unsetEmptyArray from './unsetEmptyArray';\nimport validateField from './validateField';\n\nconst defaultOptions = {\n  mode: VALIDATION_MODE.onSubmit,\n  reValidateMode: VALIDATION_MODE.onChange,\n  shouldFocusError: true,\n} as const;\n\nconst isWindowUndefined = typeof window === 'undefined';\n\nexport function createFormControl<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): Omit<UseFormReturn<TFieldValues, TContext>, 'formState'> {\n  let _options = {\n    ...defaultOptions,\n    ...props,\n  };\n  let _formState: FormState<TFieldValues> = {\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {} as FieldErrors<TFieldValues>,\n  };\n  let _fields = {};\n  let _defaultValues = _options.defaultValues || {};\n  let _formValues = _options.shouldUnregister\n    ? {}\n    : cloneObject(_defaultValues);\n  let _stateFlags = {\n    action: false,\n    mount: false,\n    watch: false,\n  };\n  let _names: Names = {\n    mount: new Set(),\n    unMount: new Set(),\n    array: new Set(),\n    watch: new Set(),\n  } as Names;\n  let delayErrorCallback: DelayCallback;\n  let timer = 0;\n  let validateFields: Record<InternalFieldName, number> = {};\n  const _proxyFormState = {\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  };\n  const _subjects: Subjects<TFieldValues> = {\n    watch: createSubject(),\n    array: createSubject(),\n    state: createSubject(),\n  };\n\n  const validationModeBeforeSubmit = getValidationModes(_options.mode);\n  const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\n  const shouldDisplayAllAssociatedErrors =\n    _options.criteriaMode === VALIDATION_MODE.all;\n\n  const debounce =\n    <T extends Function>(callback: T, wait: number) =>\n    (...args: any) => {\n      clearTimeout(timer);\n      timer = window.setTimeout(() => callback(...args), wait);\n    };\n\n  const isFieldWatched = (\n    name: FieldPath<TFieldValues>,\n    isBlurEvent?: boolean,\n  ) =>\n    !isBlurEvent &&\n    (_names.watchAll ||\n      _names.watch.has(name) ||\n      _names.watch.has((name.match(/\\w+/) || [])[0]));\n\n  const _updateValid = async (shouldSkipRender?: boolean) => {\n    let isValid = false;\n\n    if (_proxyFormState.isValid) {\n      isValid = _options.resolver\n        ? isEmptyObject((await _executeSchema()).errors)\n        : await executeBuildInValidation(_fields, true);\n\n      if (!shouldSkipRender && isValid !== _formState.isValid) {\n        _formState.isValid = isValid;\n        _subjects.state.next({\n          isValid,\n        });\n      }\n    }\n\n    return isValid;\n  };\n\n  const _updateFieldArray: BatchFieldArrayUpdate = (\n    name,\n    method,\n    args,\n    values = [],\n    shouldSetValues = true,\n    shouldSetFields = true,\n  ) => {\n    _stateFlags.action = true;\n\n    if (shouldSetFields && get(_fields, name)) {\n      const fieldValues = method(get(_fields, name), args.argA, args.argB);\n      shouldSetValues && set(_fields, name, fieldValues);\n    }\n\n    if (Array.isArray(get(_formState.errors, name))) {\n      const errors = method(get(_formState.errors, name), args.argA, args.argB);\n      shouldSetValues && set(_formState.errors, name, errors);\n      unsetEmptyArray(_formState.errors, name);\n    }\n\n    if (_proxyFormState.touchedFields && get(_formState.touchedFields, name)) {\n      const touchedFields = method(\n        get(_formState.touchedFields, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSetValues &&\n        set(_formState.touchedFields as TFieldValues, name, touchedFields);\n      unsetEmptyArray(_formState.touchedFields, name);\n    }\n\n    if (_proxyFormState.dirtyFields || _proxyFormState.isDirty) {\n      updateFieldArrayDirty(name, values);\n    }\n\n    _subjects.state.next({\n      isDirty: _getDirty(name, values),\n      dirtyFields: _formState.dirtyFields,\n      errors: _formState.errors,\n      isValid: _formState.isValid,\n    });\n  };\n\n  const updateErrors = (name: InternalFieldName, error: FieldError) => (\n    set(_formState.errors, name, error),\n    _subjects.state.next({\n      errors: _formState.errors,\n    })\n  );\n\n  const updateValidAndValue = (\n    name: InternalFieldName,\n    shouldSkipSetValueAs?: boolean,\n    ref?: Ref,\n  ) => {\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      const defaultValue = get(_formValues, name, get(_defaultValues, name));\n\n      isUndefined(defaultValue) ||\n      (ref && (ref as HTMLInputElement).defaultChecked) ||\n      shouldSkipSetValueAs\n        ? set(\n            _formValues,\n            name,\n            shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f),\n          )\n        : setFieldValue(name, defaultValue);\n    }\n\n    _stateFlags.mount && _updateValid();\n  };\n\n  const updateTouchAndDirty = (\n    name: InternalFieldName,\n    fieldValue: unknown,\n    isCurrentTouched?: boolean,\n    shouldRender = true,\n  ): Partial<\n    Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touchedFields'>\n  > => {\n    let isFieldDirty = false;\n    const output: Partial<FormState<TFieldValues>> & { name: string } = {\n      name,\n    };\n    const isPreviousFieldTouched = get(_formState.touchedFields, name);\n\n    if (_proxyFormState.isDirty) {\n      const isPreviousFormDirty = _formState.isDirty;\n\n      _formState.isDirty = output.isDirty = _getDirty();\n      isFieldDirty = isPreviousFormDirty !== output.isDirty;\n    }\n\n    if (_proxyFormState.dirtyFields && !isCurrentTouched) {\n      const isPreviousFieldDirty = get(_formState.dirtyFields, name);\n      const isCurrentFieldPristine = deepEqual(\n        get(_defaultValues, name),\n        fieldValue,\n      );\n\n      isCurrentFieldPristine\n        ? unset(_formState.dirtyFields, name)\n        : set(_formState.dirtyFields as TFieldValues, name, true);\n      output.dirtyFields = _formState.dirtyFields;\n      isFieldDirty =\n        isFieldDirty ||\n        isPreviousFieldDirty !== get(_formState.dirtyFields, name);\n    }\n\n    if (isCurrentTouched && !isPreviousFieldTouched) {\n      set(_formState.touchedFields as TFieldValues, name, isCurrentTouched);\n      output.touchedFields = _formState.touchedFields;\n      isFieldDirty =\n        isFieldDirty ||\n        (_proxyFormState.touchedFields &&\n          isPreviousFieldTouched !== isCurrentTouched);\n    }\n\n    isFieldDirty && shouldRender && _subjects.state.next(output);\n\n    return isFieldDirty ? output : {};\n  };\n\n  const updateFieldArrayDirty = (name: any, value: any) => (\n    set(\n      _formState.dirtyFields as TFieldValues,\n      name,\n      setFieldArrayDirtyFields(\n        value,\n        get(_defaultValues, name, []),\n        get(_formState.dirtyFields, name, []),\n      ),\n    ),\n    unsetEmptyArray(_formState.dirtyFields, name)\n  );\n\n  const shouldRenderByError = async (\n    shouldSkipRender: boolean,\n    name: InternalFieldName,\n    isValid: boolean,\n    error?: FieldError,\n    fieldState?: {\n      dirty?: FieldNamesMarkedBoolean<TFieldValues>;\n      isDirty?: boolean;\n      touched?: FieldNamesMarkedBoolean<TFieldValues>;\n    },\n  ): Promise<void> => {\n    const previousFieldError = get(_formState.errors, name);\n    const shouldUpdateValid =\n      _proxyFormState.isValid && _formState.isValid !== isValid;\n\n    if (props.delayError && error) {\n      delayErrorCallback =\n        delayErrorCallback || debounce(updateErrors, props.delayError);\n      delayErrorCallback(name, error);\n    } else {\n      clearTimeout(timer);\n      error\n        ? set(_formState.errors, name, error)\n        : unset(_formState.errors, name);\n    }\n\n    if (\n      ((error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\n        !isEmptyObject(fieldState) ||\n        shouldUpdateValid) &&\n      !shouldSkipRender\n    ) {\n      const updatedFormState = {\n        ...fieldState,\n        ...(shouldUpdateValid ? { isValid } : {}),\n        errors: _formState.errors,\n        name,\n      };\n\n      _formState = {\n        ..._formState,\n        ...updatedFormState,\n      };\n\n      _subjects.state.next(updatedFormState);\n    }\n\n    validateFields[name]--;\n\n    if (_proxyFormState.isValidating && !validateFields[name]) {\n      _subjects.state.next({\n        isValidating: false,\n      });\n      validateFields = {};\n    }\n  };\n\n  const _executeSchema = async (name?: InternalFieldName[]) =>\n    _options.resolver\n      ? await _options.resolver(\n          { ..._formValues } as UnpackNestedValue<TFieldValues>,\n          _options.context,\n          getResolverOptions(\n            name || _names.mount,\n            _fields,\n            _options.criteriaMode,\n            _options.shouldUseNativeValidation,\n          ),\n        )\n      : ({} as ResolverResult<TFieldValues>);\n\n  const executeSchemaAndUpdateState = async (names?: InternalFieldName[]) => {\n    const { errors } = await _executeSchema();\n\n    if (names) {\n      for (const name of names) {\n        const error = get(errors, name);\n        error\n          ? set(_formState.errors, name, error)\n          : unset(_formState.errors, name);\n      }\n    } else {\n      _formState.errors = errors as FieldErrors<TFieldValues>;\n    }\n\n    return errors;\n  };\n\n  const executeBuildInValidation = async (\n    fields: FieldRefs,\n    shouldOnlyCheckValid?: boolean,\n    context = {\n      valid: true,\n    },\n  ) => {\n    for (const name in fields) {\n      const field = fields[name];\n\n      if (field) {\n        const fieldReference = field._f;\n        const fieldValue = omit(field, '_f');\n\n        if (fieldReference) {\n          const fieldError = await validateField(\n            field,\n            get(_formValues, fieldReference.name),\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n          );\n\n          if (fieldError[fieldReference.name]) {\n            context.valid = false;\n\n            if (shouldOnlyCheckValid) {\n              break;\n            }\n          }\n\n          if (!shouldOnlyCheckValid) {\n            fieldError[fieldReference.name]\n              ? set(\n                  _formState.errors,\n                  fieldReference.name,\n                  fieldError[fieldReference.name],\n                )\n              : unset(_formState.errors, fieldReference.name);\n          }\n        }\n\n        fieldValue &&\n          (await executeBuildInValidation(\n            fieldValue,\n            shouldOnlyCheckValid,\n            context,\n          ));\n      }\n    }\n\n    return context.valid;\n  };\n\n  const _removeUnmounted = () => {\n    for (const name of _names.unMount) {\n      const field: Field = get(_fields, name);\n\n      field &&\n        (field._f.refs\n          ? field._f.refs.every((ref) => !live(ref))\n          : !live(field._f.ref)) &&\n        unregister(name as FieldPath<TFieldValues>);\n    }\n\n    _names.unMount = new Set();\n  };\n\n  const _getDirty: GetIsDirty = (name, data) => (\n    name && data && set(_formValues, name, data),\n    !deepEqual(getValues(), _defaultValues)\n  );\n\n  const _getWatch: WatchInternal<TFieldValues> = (\n    names,\n    defaultValue,\n    isGlobal,\n  ) => {\n    const fieldValues = {\n      ...(_stateFlags.mount\n        ? _formValues\n        : isUndefined(defaultValue)\n        ? _defaultValues\n        : isString(names)\n        ? { [names]: defaultValue }\n        : defaultValue),\n    };\n\n    return generateWatchOutput(names, _names, fieldValues, isGlobal);\n  };\n\n  const _getFieldArray = (name: InternalFieldName) =>\n    get(\n      _stateFlags.mount ? _formValues : _defaultValues,\n      name,\n      props.shouldUnregister ? get(_defaultValues, name, []) : [],\n    );\n\n  const setFieldValue = (\n    name: InternalFieldName,\n    value: SetFieldValue<TFieldValues>,\n    options: SetValueConfig = {},\n  ) => {\n    const field: Field = get(_fields, name);\n    let fieldValue: unknown = value;\n\n    if (field) {\n      const fieldReference = field._f;\n\n      if (fieldReference) {\n        set(_formValues, name, getFieldValueAs(value, fieldReference));\n\n        fieldValue =\n          isWeb && isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\n            ? ''\n            : value;\n\n        if (isFileInput(fieldReference.ref) && !isString(fieldValue)) {\n          fieldReference.ref.files = fieldValue as FileList;\n        } else if (isMultipleSelect(fieldReference.ref)) {\n          [...fieldReference.ref.options].forEach(\n            (selectRef) =>\n              (selectRef.selected = (\n                fieldValue as InternalFieldName[]\n              ).includes(selectRef.value)),\n          );\n        } else if (fieldReference.refs) {\n          if (isCheckBoxInput(fieldReference.ref)) {\n            fieldReference.refs.length > 1\n              ? fieldReference.refs.forEach(\n                  (checkboxRef) =>\n                    (checkboxRef.checked = Array.isArray(fieldValue)\n                      ? !!(fieldValue as []).find(\n                          (data: string) => data === checkboxRef.value,\n                        )\n                      : fieldValue === checkboxRef.value),\n                )\n              : (fieldReference.refs[0].checked = !!fieldValue);\n          } else {\n            fieldReference.refs.forEach(\n              (radioRef: HTMLInputElement) =>\n                (radioRef.checked = radioRef.value === fieldValue),\n            );\n          }\n        } else {\n          fieldReference.ref.value = fieldValue;\n        }\n      }\n    }\n\n    (options.shouldDirty || options.shouldTouch) &&\n      updateTouchAndDirty(name, fieldValue, options.shouldTouch);\n\n    options.shouldValidate && trigger(name as Path<TFieldValues>);\n  };\n\n  const setValues = (\n    name: FieldPath<TFieldValues>,\n    value: UnpackNestedValue<PathValue<TFieldValues, FieldPath<TFieldValues>>>,\n    options: SetValueConfig,\n  ) => {\n    for (const fieldKey in value) {\n      const fieldValue: SetFieldValue<TFieldValues> = value[fieldKey];\n      const fieldName = `${name}.${fieldKey}` as Path<TFieldValues>;\n      const field = get(_fields, fieldName);\n\n      (_names.array.has(name) ||\n        !isPrimitive(fieldValue) ||\n        (field && !field._f)) &&\n      !isDateObject(fieldValue)\n        ? setValues(fieldName, fieldValue, options)\n        : setFieldValue(fieldName, fieldValue, options);\n    }\n  };\n\n  const setValue: UseFormSetValue<TFieldValues> = (\n    name,\n    value,\n    options = {},\n  ) => {\n    const field = get(_fields, name);\n    const isFieldArray = _names.array.has(name);\n\n    set(_formValues, name, value);\n\n    if (isFieldArray) {\n      _subjects.array.next({\n        name,\n        values: _formValues,\n      });\n\n      if (\n        (_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&\n        options.shouldDirty\n      ) {\n        updateFieldArrayDirty(name, value);\n\n        _subjects.state.next({\n          name,\n          dirtyFields: _formState.dirtyFields,\n          isDirty: _getDirty(name, value),\n        });\n      }\n    } else {\n      field && !field._f && !isNullOrUndefined(value)\n        ? setValues(name, value, options)\n        : setFieldValue(name, value, options);\n    }\n\n    isFieldWatched(name) && _subjects.state.next({});\n    _subjects.watch.next({\n      name,\n    });\n  };\n\n  const handleChange: ChangeHandler = async (event) => {\n    const target = event.target;\n    let name = target.name;\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      let error;\n      let isValid;\n      const fieldValue = target.type ? getFieldValue(field._f) : target.value;\n      const isBlurEvent = event.type === EVENTS.BLUR;\n      const shouldSkipValidation =\n        (!hasValidation(field._f) &&\n          !_options.resolver &&\n          !get(_formState.errors, name) &&\n          !field._f.deps) ||\n        skipValidation(\n          isBlurEvent,\n          get(_formState.touchedFields, name),\n          _formState.isSubmitted,\n          validationModeAfterSubmit,\n          validationModeBeforeSubmit,\n        );\n      const isWatched = isFieldWatched(name, isBlurEvent);\n\n      if (isBlurEvent) {\n        field._f.onBlur && field._f.onBlur(event);\n      } else if (field._f.onChange) {\n        field._f.onChange(event);\n      }\n\n      set(_formValues, name, fieldValue);\n\n      const fieldState = updateTouchAndDirty(\n        name,\n        fieldValue,\n        isBlurEvent,\n        false,\n      );\n\n      const shouldRender = !isEmptyObject(fieldState) || isWatched;\n\n      !isBlurEvent &&\n        _subjects.watch.next({\n          name,\n          type: event.type,\n        });\n\n      if (shouldSkipValidation) {\n        return (\n          shouldRender &&\n          _subjects.state.next({ name, ...(isWatched ? {} : fieldState) })\n        );\n      }\n\n      !isBlurEvent && isWatched && _subjects.state.next({});\n\n      validateFields[name] = validateFields[name] ? +1 : 1;\n\n      _proxyFormState.isValidating &&\n        _subjects.state.next({\n          isValidating: true,\n        });\n\n      if (_options.resolver) {\n        const { errors } = await _executeSchema([name]);\n        const previousErrorLookupResult = schemaErrorLookup(\n          _formState.errors,\n          _fields,\n          name,\n        );\n        const errorLookupResult = schemaErrorLookup(\n          errors,\n          _fields,\n          previousErrorLookupResult.name || name,\n        );\n\n        error = errorLookupResult.error;\n        name = errorLookupResult.name;\n\n        isValid = isEmptyObject(errors);\n      } else {\n        error = (\n          await validateField(\n            field,\n            get(_formValues, name) as Field,\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n          )\n        )[name];\n\n        isValid = await _updateValid(true);\n      }\n\n      field._f.deps && trigger(field._f.deps as FieldPath<TFieldValues>[]);\n\n      shouldRenderByError(false, name, isValid, error, fieldState);\n    }\n  };\n\n  const trigger: UseFormTrigger<TFieldValues> = async (name, options = {}) => {\n    let isValid;\n    let validationResult;\n    const fieldNames = convertToArrayPayload(name) as InternalFieldName[];\n\n    _subjects.state.next({\n      isValidating: true,\n    });\n\n    if (_options.resolver) {\n      const errors = await executeSchemaAndUpdateState(\n        isUndefined(name) ? name : fieldNames,\n      );\n\n      isValid = isEmptyObject(errors);\n      validationResult = name\n        ? !fieldNames.some((name) => get(errors, name))\n        : isValid;\n    } else if (name) {\n      validationResult = (\n        await Promise.all(\n          fieldNames.map(async (fieldName) => {\n            const field = get(_fields, fieldName);\n            return await executeBuildInValidation(\n              field && field._f ? { [fieldName]: field } : field,\n            );\n          }),\n        )\n      ).every(Boolean);\n      !(!validationResult && !_formState.isValid) && _updateValid();\n    } else {\n      validationResult = isValid = await executeBuildInValidation(_fields);\n    }\n\n    _subjects.state.next({\n      ...(!isString(name) ||\n      (_proxyFormState.isValid && isValid !== _formState.isValid)\n        ? {}\n        : { name }),\n      ...(_options.resolver ? { isValid } : {}),\n      errors: _formState.errors,\n      isValidating: false,\n    });\n\n    options.shouldFocus &&\n      !validationResult &&\n      focusFieldBy(\n        _fields,\n        (key) => get(_formState.errors, key),\n        name ? fieldNames : _names.mount,\n      );\n\n    return validationResult;\n  };\n\n  const getValues: UseFormGetValues<TFieldValues> = (\n    fieldNames?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>,\n  ) => {\n    const values = {\n      ..._defaultValues,\n      ...(_stateFlags.mount ? _formValues : {}),\n    };\n\n    return isUndefined(fieldNames)\n      ? values\n      : isString(fieldNames)\n      ? get(values, fieldNames as InternalFieldName)\n      : fieldNames.map((name) => get(values, name as InternalFieldName));\n  };\n\n  const clearErrors: UseFormClearErrors<TFieldValues> = (name) => {\n    name\n      ? convertToArrayPayload(name).forEach((inputName) =>\n          unset(_formState.errors, inputName),\n        )\n      : (_formState.errors = {} as FieldErrors<TFieldValues>);\n\n    _subjects.state.next({\n      errors: _formState.errors,\n      isValid: true,\n    });\n  };\n\n  const setError: UseFormSetError<TFieldValues> = (name, error, options) => {\n    const ref = ((get(_fields, name, { _f: {} }) as Field)._f || {}).ref;\n\n    set(_formState.errors, name, {\n      ...error,\n      ref,\n    });\n\n    _subjects.state.next({\n      name,\n      errors: _formState.errors,\n      isValid: false,\n    });\n\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n\n  const watch: UseFormWatch<TFieldValues> = (\n    name?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>\n      | WatchObserver<TFieldValues>,\n    defaultValue?: unknown,\n  ) =>\n    isFunction(name)\n      ? _subjects.watch.subscribe({\n          next: (info: any) =>\n            name(\n              _getWatch(\n                undefined,\n                defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n              ),\n              info,\n            ),\n        })\n      : _getWatch(\n          name as InternalFieldName | InternalFieldName[],\n          defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n          true,\n        );\n\n  const unregister: UseFormUnregister<TFieldValues> = (name, options = {}) => {\n    for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\n      _names.mount.delete(fieldName);\n      _names.array.delete(fieldName);\n\n      if (get(_fields, fieldName)) {\n        if (!options.keepValue) {\n          unset(_fields, fieldName);\n          unset(_formValues, fieldName);\n        }\n\n        !options.keepError && unset(_formState.errors, fieldName);\n        !options.keepDirty && unset(_formState.dirtyFields, fieldName);\n        !options.keepTouched && unset(_formState.touchedFields, fieldName);\n        !_options.shouldUnregister &&\n          !options.keepDefaultValue &&\n          unset(_defaultValues, fieldName);\n      }\n    }\n\n    _subjects.watch.next({});\n\n    _subjects.state.next({\n      ..._formState,\n      ...(!options.keepDirty ? {} : { isDirty: _getDirty() }),\n    });\n\n    !options.keepIsValid && _updateValid();\n  };\n\n  const register: UseFormRegister<TFieldValues> = (name, options = {}) => {\n    const field = get(_fields, name);\n\n    set(_fields, name, {\n      _f: {\n        ...(field && field._f ? field._f : { ref: { name } }),\n        name,\n        mount: true,\n        ...options,\n      },\n    });\n    _names.mount.add(name);\n\n    !isUndefined(options.value) &&\n      !options.disabled &&\n      set(_formValues, name, get(_formValues, name, options.value));\n\n    field\n      ? isBoolean(options.disabled) &&\n        set(\n          _formValues,\n          name,\n          options.disabled\n            ? undefined\n            : get(_formValues, name, getFieldValue(field._f)),\n        )\n      : updateValidAndValue(name, true);\n\n    return isWindowUndefined\n      ? ({ name: name as InternalFieldName } as UseFormRegisterReturn)\n      : {\n          name,\n          ...(isBoolean(options.disabled)\n            ? { disabled: options.disabled }\n            : {}),\n          onChange: handleChange,\n          onBlur: handleChange,\n          ref: (ref: HTMLInputElement | null): void => {\n            if (ref) {\n              register(name, options);\n              let field: Field = get(_fields, name);\n              const fieldRef = isUndefined(ref.value)\n                ? ref.querySelectorAll\n                  ? (ref.querySelectorAll('input,select,textarea')[0] as Ref) ||\n                    ref\n                  : ref\n                : ref;\n\n              const isRadioOrCheckbox = isRadioOrCheckboxFunction(fieldRef);\n\n              if (\n                fieldRef === field._f.ref ||\n                (isRadioOrCheckbox &&\n                  compact(field._f.refs || []).find(\n                    (option) => option === fieldRef,\n                  ))\n              ) {\n                return;\n              }\n\n              field = {\n                _f: isRadioOrCheckbox\n                  ? {\n                      ...field._f,\n                      refs: [\n                        ...compact(field._f.refs || []).filter(live),\n                        fieldRef,\n                      ],\n                      ref: { type: fieldRef.type, name },\n                    }\n                  : {\n                      ...field._f,\n                      ref: fieldRef,\n                    },\n              };\n\n              set(_fields, name, field);\n\n              (!options || !options.disabled) &&\n                updateValidAndValue(name, false, fieldRef);\n            } else {\n              const field: Field = get(_fields, name, {});\n              const shouldUnregister =\n                _options.shouldUnregister || options.shouldUnregister;\n\n              if (field._f) {\n                field._f.mount = false;\n              }\n\n              shouldUnregister &&\n                !(\n                  isNameInFieldArray(_names.array, name) && _stateFlags.action\n                ) &&\n                _names.unMount.add(name);\n            }\n          },\n        };\n  };\n\n  const handleSubmit: UseFormHandleSubmit<TFieldValues> =\n    (onValid, onInvalid) => async (e) => {\n      if (e) {\n        e.preventDefault && e.preventDefault();\n        e.persist && e.persist();\n      }\n      let hasNoPromiseError = true;\n      let fieldValues: any = _options.shouldUnregister\n        ? cloneObject(_formValues)\n        : { ..._formValues };\n\n      _subjects.state.next({\n        isSubmitting: true,\n      });\n\n      try {\n        if (_options.resolver) {\n          const { errors, values } = await _executeSchema();\n          _formState.errors = errors as FieldErrors<TFieldValues>;\n          fieldValues = values;\n        } else {\n          await executeBuildInValidation(_fields);\n        }\n\n        if (\n          isEmptyObject(_formState.errors) &&\n          Object.keys(_formState.errors).every((name) => get(fieldValues, name))\n        ) {\n          _subjects.state.next({\n            errors: {} as FieldErrors<TFieldValues>,\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          onInvalid && (await onInvalid(_formState.errors, e));\n          _options.shouldFocusError &&\n            focusFieldBy(\n              _fields,\n              (key) => get(_formState.errors, key),\n              _names.mount,\n            );\n        }\n      } catch (err) {\n        hasNoPromiseError = false;\n        throw err;\n      } finally {\n        _formState.isSubmitted = true;\n        _subjects.state.next({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful:\n            isEmptyObject(_formState.errors) && hasNoPromiseError,\n          submitCount: _formState.submitCount + 1,\n          errors: _formState.errors,\n        });\n      }\n    };\n\n  const resetField: UseFormResetField<TFieldValues> = (name, options = {}) => {\n    if (isUndefined(options.defaultValue)) {\n      setValue(name, get(_defaultValues, name));\n    } else {\n      setValue(name, options.defaultValue);\n      set(_defaultValues, name, options.defaultValue);\n    }\n\n    if (!options.keepTouched) {\n      unset(_formState.touchedFields, name);\n    }\n\n    if (!options.keepDirty) {\n      unset(_formState.dirtyFields, name);\n      _formState.isDirty = options.defaultValue\n        ? _getDirty(name, get(_defaultValues, name))\n        : _getDirty();\n    }\n\n    if (!options.keepError) {\n      unset(_formState.errors, name);\n      _proxyFormState.isValid && _updateValid();\n    }\n\n    _subjects.state.next({ ..._formState });\n  };\n\n  const reset: UseFormReset<TFieldValues> = (\n    formValues,\n    keepStateOptions = {},\n  ) => {\n    const updatedValues = formValues || _defaultValues;\n    const cloneUpdatedValues = cloneObject(updatedValues);\n    const values = !isEmptyObject(formValues)\n      ? cloneUpdatedValues\n      : _defaultValues;\n\n    if (!keepStateOptions.keepDefaultValues) {\n      _defaultValues = updatedValues;\n    }\n\n    if (!keepStateOptions.keepValues) {\n      if (isWeb) {\n        for (const name of _names.mount) {\n          const field = get(_fields, name);\n          if (field && field._f) {\n            const fieldReference = Array.isArray(field._f.refs)\n              ? field._f.refs[0]\n              : field._f.ref;\n\n            try {\n              isHTMLElement(fieldReference) &&\n                fieldReference.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n\n      _formValues = props.shouldUnregister\n        ? keepStateOptions.keepDefaultValues\n          ? cloneObject(_defaultValues)\n          : {}\n        : cloneUpdatedValues;\n      _fields = {};\n\n      _subjects.watch.next({\n        values,\n      });\n\n      _subjects.array.next({\n        values,\n      });\n    }\n\n    _names = {\n      mount: new Set(),\n      unMount: new Set(),\n      array: new Set(),\n      watch: new Set(),\n      watchAll: false,\n      focus: '',\n    };\n\n    _subjects.state.next({\n      submitCount: keepStateOptions.keepSubmitCount\n        ? _formState.submitCount\n        : 0,\n      isDirty: keepStateOptions.keepDirty\n        ? _formState.isDirty\n        : keepStateOptions.keepDefaultValues\n        ? !deepEqual(formValues, _defaultValues)\n        : false,\n      isSubmitted: keepStateOptions.keepIsSubmitted\n        ? _formState.isSubmitted\n        : false,\n      dirtyFields: keepStateOptions.keepDirty\n        ? _formState.dirtyFields\n        : ((keepStateOptions.keepDefaultValues && formValues\n            ? Object.entries(formValues).reduce(\n                (previous, [key, value]) => ({\n                  ...previous,\n                  [key]: value !== get(_defaultValues, key),\n                }),\n                {},\n              )\n            : {}) as FieldNamesMarkedBoolean<TFieldValues>),\n      touchedFields: keepStateOptions.keepTouched\n        ? _formState.touchedFields\n        : ({} as FieldNamesMarkedBoolean<TFieldValues>),\n      errors: keepStateOptions.keepErrors\n        ? _formState.errors\n        : ({} as FieldErrors<TFieldValues>),\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n\n    _stateFlags.mount =\n      !_proxyFormState.isValid || !!keepStateOptions.keepIsValid;\n    _stateFlags.watch = !!props.shouldUnregister;\n  };\n\n  const setFocus: UseFormSetFocus<TFieldValues> = (name) => {\n    const field = get(_fields, name)._f;\n    (field.ref.focus ? field.ref : field.refs[0]).focus();\n  };\n\n  return {\n    control: {\n      register,\n      unregister,\n      _executeSchema,\n      _getWatch,\n      _getDirty,\n      _updateValid,\n      _removeUnmounted,\n      _updateFieldArray,\n      _getFieldArray,\n      _subjects,\n      _proxyFormState,\n      get _fields() {\n        return _fields;\n      },\n      set _fields(value) {\n        _fields = value;\n      },\n      get _formValues() {\n        return _formValues;\n      },\n      set _formValues(value) {\n        _formValues = value;\n      },\n      get _stateFlags() {\n        return _stateFlags;\n      },\n      set _stateFlags(value) {\n        _stateFlags = value;\n      },\n      get _defaultValues() {\n        return _defaultValues;\n      },\n      set _defaultValues(value) {\n        _defaultValues = value;\n      },\n      get _names() {\n        return _names;\n      },\n      set _names(value) {\n        _names = value;\n      },\n      get _formState() {\n        return _formState;\n      },\n      set _formState(value) {\n        _formState = value;\n      },\n      get _options() {\n        return _options;\n      },\n      set _options(value) {\n        _options = {\n          ..._options,\n          ...value,\n        };\n      },\n    },\n    trigger,\n    register,\n    handleSubmit,\n    watch,\n    setValue,\n    getValues,\n    reset,\n    resetField,\n    clearErrors,\n    unregister,\n    setError,\n    setFocus,\n  };\n}\n","import * as React from 'react';\n\nimport { createFormControl } from './logic/createFormControl';\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport {\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldValues,\n  FormState,\n  UseFormProps,\n  UseFormReturn,\n} from './types';\nimport { useSubscribe } from './useSubscribe';\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): UseFormReturn<TFieldValues, TContext> {\n  const _formControl = React.useRef<\n    UseFormReturn<TFieldValues, TContext> | undefined\n  >();\n  const [formState, updateFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {} as FieldErrors<TFieldValues>,\n  });\n\n  if (_formControl.current) {\n    _formControl.current.control._options = props;\n  } else {\n    _formControl.current = {\n      ...createFormControl(props),\n      formState,\n    };\n  }\n\n  const control = _formControl.current.control;\n\n  useSubscribe({\n    subject: control._subjects.state,\n    callback: (formState) => {\n      if (shouldRenderFormState(formState, control._proxyFormState, true)) {\n        control._formState = {\n          ...control._formState,\n          ...formState,\n        };\n\n        updateFormState({ ...control._formState });\n      }\n    },\n  });\n\n  React.useEffect(() => {\n    if (!control._stateFlags.mount) {\n      control._proxyFormState.isValid && control._updateValid();\n      control._stateFlags.mount = true;\n    }\n    if (control._stateFlags.watch) {\n      control._stateFlags.watch = false;\n      control._subjects.state.next({});\n    }\n    control._removeUnmounted();\n  });\n\n  _formControl.current.formState = getProxyFormState(\n    formState,\n    control._proxyFormState,\n  );\n\n  return _formControl.current;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}