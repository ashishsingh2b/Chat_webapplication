{"ast":null,"code":"var _jsxFileName = \"/media/ts/fc248944-f5bc-4874-8086-ae2a42a47c5b/home/ts/Desktop/Ashish Singh/Full_Stack/Chat_webapplication/client/src/components/chatbody/ChatBody.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useCallback, useRef } from \"react\";\nimport ApiConnector from \"../../api/apiConnector\";\nimport ApiEndpoints from \"../../api/apiEndpoints\";\nimport ServerUrl from \"../../api/serverUrl\";\nimport Constants from \"../../lib/constants\";\nimport SocketActions from \"../../lib/socketActions\";\nimport CommonUtil from \"../../util/commonUtil\";\nimport \"./chatBodyStyle.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ChatBody = _ref => {\n  _s();\n\n  let {\n    match,\n    currentChattingMember,\n    setOnlineUserList\n  } = _ref;\n  const [inputMessage, setInputMessage] = useState(\"\");\n  const [messages, setMessages] = useState({\n    results: []\n  });\n  const [typing, setTyping] = useState(false);\n  const [selectedFile, setSelectedFile] = useState(null);\n  const socketRef = useRef(null);\n  const typingTimerRef = useRef(null);\n  const isTypingSignalSentRef = useRef(false);\n  const fetchChatMessage = useCallback(async currentChatId => {\n    if (currentChatId) {\n      try {\n        const url = ApiEndpoints.CHAT_MESSAGE_URL.replace(Constants.CHAT_ID_PLACE_HOLDER, currentChatId) + \"?limit=20&offset=0\";\n        const chatMessages = await ApiConnector.sendGetRequest(url);\n        setMessages(chatMessages);\n      } catch (error) {\n        console.error(\"Failed to fetch chat messages:\", error);\n      }\n    }\n  }, []);\n  useEffect(() => {\n    const currentChatId = CommonUtil.getActiveChatId(match);\n    fetchChatMessage(currentChatId);\n  }, [match, fetchChatMessage]);\n  useEffect(() => {\n    socketRef.current = new WebSocket(ServerUrl.WS_BASE_URL + `ws/users/${CommonUtil.getUserId()}/chat/`);\n\n    const handleMessage = event => {\n      const data = JSON.parse(event.data);\n      const chatId = CommonUtil.getActiveChatId(match);\n      const userId = CommonUtil.getUserId();\n\n      if (chatId === data.roomId) {\n        if (data.action === SocketActions.MESSAGE) {\n          data[\"userImage\"] = ServerUrl.BASE_URL.slice(0, -1) + data.userImage;\n          setMessages(prevState => ({ ...prevState,\n            results: [...prevState.results, data]\n          }));\n        } else if (data.action === SocketActions.ONLINE_USER) {\n          setOnlineUserList(data.userList);\n        }\n      }\n    };\n\n    socketRef.current.onmessage = handleMessage;\n    return () => {\n      socketRef.current.close();\n    };\n  }, [match, setOnlineUserList]);\n\n  const handleFileChange = event => {\n    setSelectedFile(event.target.files[0]);\n  };\n\n  const messageSubmitHandler = event => {\n    event.preventDefault();\n\n    if (inputMessage || selectedFile) {\n      const messageData = {\n        action: SocketActions.MESSAGE,\n        user: CommonUtil.getUserId(),\n        roomId: CommonUtil.getActiveChatId(match)\n      };\n\n      if (inputMessage) {\n        messageData.message = inputMessage;\n        messageData.message_type = 'text';\n      }\n\n      if (selectedFile) {\n        const reader = new FileReader();\n\n        reader.onloadend = () => {\n          messageData.media_file = reader.result;\n          socketRef.current.send(JSON.stringify(messageData));\n        };\n\n        reader.readAsDataURL(selectedFile);\n      } else {\n        socketRef.current.send(JSON.stringify(messageData));\n      }\n    }\n\n    setInputMessage(\"\");\n    setSelectedFile(null);\n  };\n\n  const handleTyping = () => {\n    if (typingTimerRef.current) {\n      clearTimeout(typingTimerRef.current);\n    }\n\n    setTyping(true);\n    typingTimerRef.current = setTimeout(() => {\n      setTyping(false);\n\n      if (!isTypingSignalSentRef.current) {\n        isTypingSignalSentRef.current = true;\n        socketRef.current.send(JSON.stringify({\n          action: SocketActions.TYPING,\n          user: CommonUtil.getUserId(),\n          roomId: CommonUtil.getActiveChatId(match)\n        }));\n      }\n    }, 3000);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-body\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"message-list\",\n      children: messages.results.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${message.user === CommonUtil.getUserId() ? 'sent' : 'received'}`,\n        children: [message.message_type === 'text' && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: message.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 49\n        }, this), message.message_type === 'image' && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: message.media_file,\n            alt: \"media preview\",\n            className: \"img-fluid\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: message.media_file.split('/').pop()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 15\n        }, this), message.message_type === 'document' && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"a\", {\n            href: message.media_file,\n            download: true,\n            children: \"Download Document\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: message.media_file.split('/').pop()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 15\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: messageSubmitHandler,\n      className: \"message-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        onChange: handleFileChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: inputMessage,\n        onChange: e => setInputMessage(e.target.value),\n        onKeyUp: handleTyping\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ChatBody, \"2wR1CQO6XbslYWocrv7RfP5CxHA=\");\n\n_c = ChatBody;\nexport default ChatBody;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatBody\");","map":{"version":3,"sources":["/media/ts/fc248944-f5bc-4874-8086-ae2a42a47c5b/home/ts/Desktop/Ashish Singh/Full_Stack/Chat_webapplication/client/src/components/chatbody/ChatBody.js"],"names":["React","useEffect","useState","useCallback","useRef","ApiConnector","ApiEndpoints","ServerUrl","Constants","SocketActions","CommonUtil","ChatBody","match","currentChattingMember","setOnlineUserList","inputMessage","setInputMessage","messages","setMessages","results","typing","setTyping","selectedFile","setSelectedFile","socketRef","typingTimerRef","isTypingSignalSentRef","fetchChatMessage","currentChatId","url","CHAT_MESSAGE_URL","replace","CHAT_ID_PLACE_HOLDER","chatMessages","sendGetRequest","error","console","getActiveChatId","current","WebSocket","WS_BASE_URL","getUserId","handleMessage","event","data","JSON","parse","chatId","userId","roomId","action","MESSAGE","BASE_URL","slice","userImage","prevState","ONLINE_USER","userList","onmessage","close","handleFileChange","target","files","messageSubmitHandler","preventDefault","messageData","user","message","message_type","reader","FileReader","onloadend","media_file","result","send","stringify","readAsDataURL","handleTyping","clearTimeout","setTimeout","TYPING","map","index","split","pop","e","value"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useCallback, useRef } from \"react\";\nimport ApiConnector from \"../../api/apiConnector\";\nimport ApiEndpoints from \"../../api/apiEndpoints\";\nimport ServerUrl from \"../../api/serverUrl\";\nimport Constants from \"../../lib/constants\";\nimport SocketActions from \"../../lib/socketActions\";\nimport CommonUtil from \"../../util/commonUtil\";\nimport \"./chatBodyStyle.css\";\n\nconst ChatBody = ({ match, currentChattingMember, setOnlineUserList }) => {\n  const [inputMessage, setInputMessage] = useState(\"\");\n  const [messages, setMessages] = useState({ results: [] });\n  const [typing, setTyping] = useState(false);\n  const [selectedFile, setSelectedFile] = useState(null);\n\n  const socketRef = useRef(null);\n  const typingTimerRef = useRef(null);\n  const isTypingSignalSentRef = useRef(false);\n\n  const fetchChatMessage = useCallback(async (currentChatId) => {\n    if (currentChatId) {\n      try {\n        const url =\n          ApiEndpoints.CHAT_MESSAGE_URL.replace(\n            Constants.CHAT_ID_PLACE_HOLDER,\n            currentChatId\n          ) + \"?limit=20&offset=0\";\n        const chatMessages = await ApiConnector.sendGetRequest(url);\n        setMessages(chatMessages);\n      } catch (error) {\n        console.error(\"Failed to fetch chat messages:\", error);\n      }\n    }\n  }, []);\n\n  useEffect(() => {\n    const currentChatId = CommonUtil.getActiveChatId(match);\n    fetchChatMessage(currentChatId);\n  }, [match, fetchChatMessage]);\n\n  useEffect(() => {\n    socketRef.current = new WebSocket(\n      ServerUrl.WS_BASE_URL + `ws/users/${CommonUtil.getUserId()}/chat/`\n    );\n\n    const handleMessage = (event) => {\n      const data = JSON.parse(event.data);\n      const chatId = CommonUtil.getActiveChatId(match);\n      const userId = CommonUtil.getUserId();\n\n      if (chatId === data.roomId) {\n        if (data.action === SocketActions.MESSAGE) {\n          data[\"userImage\"] = ServerUrl.BASE_URL.slice(0, -1) + data.userImage;\n          setMessages((prevState) => ({\n            ...prevState,\n            results: [...prevState.results, data],\n          }));\n        } else if (data.action === SocketActions.ONLINE_USER) {\n          setOnlineUserList(data.userList);\n        }\n      }\n    };\n\n    socketRef.current.onmessage = handleMessage;\n\n    return () => {\n      socketRef.current.close();\n    };\n  }, [match, setOnlineUserList]);\n\n  const handleFileChange = (event) => {\n    setSelectedFile(event.target.files[0]);\n  };\n\n  const messageSubmitHandler = (event) => {\n    event.preventDefault();\n    if (inputMessage || selectedFile) {\n      const messageData = {\n        action: SocketActions.MESSAGE,\n        user: CommonUtil.getUserId(),\n        roomId: CommonUtil.getActiveChatId(match),\n      };\n\n      if (inputMessage) {\n        messageData.message = inputMessage;\n        messageData.message_type = 'text';\n      }\n\n      if (selectedFile) {\n        const reader = new FileReader();\n        reader.onloadend = () => {\n          messageData.media_file = reader.result;\n          socketRef.current.send(JSON.stringify(messageData));\n        };\n        reader.readAsDataURL(selectedFile);\n      } else {\n        socketRef.current.send(JSON.stringify(messageData));\n      }\n    }\n    setInputMessage(\"\");\n    setSelectedFile(null);\n  };\n\n  const handleTyping = () => {\n    if (typingTimerRef.current) {\n      clearTimeout(typingTimerRef.current);\n    }\n\n    setTyping(true);\n\n    typingTimerRef.current = setTimeout(() => {\n      setTyping(false);\n      if (!isTypingSignalSentRef.current) {\n        isTypingSignalSentRef.current = true;\n        socketRef.current.send(\n          JSON.stringify({\n            action: SocketActions.TYPING,\n            user: CommonUtil.getUserId(),\n            roomId: CommonUtil.getActiveChatId(match),\n          })\n        );\n      }\n    }, 3000);\n  };\n\n  return (\n    <div className=\"chat-body\">\n      <div className=\"message-list\">\n        {messages.results.map((message, index) => (\n          <div key={index} className={`message ${message.user === CommonUtil.getUserId() ? 'sent' : 'received'}`}>\n            {message.message_type === 'text' && <p>{message.message}</p>}\n            {message.message_type === 'image' && (\n              <div>\n                <img src={message.media_file} alt=\"media preview\" className=\"img-fluid\" />\n                <div>{message.media_file.split('/').pop()}</div>\n              </div>\n            )}\n            {message.message_type === 'document' && (\n              <div>\n                <a href={message.media_file} download>\n                  Download Document\n                </a>\n                <div>{message.media_file.split('/').pop()}</div>\n              </div>\n            )}\n          </div>\n        ))}\n      </div>\n      <form onSubmit={messageSubmitHandler} className=\"message-form\">\n        <input\n          type=\"file\"\n          onChange={handleFileChange}\n        />\n        <textarea\n          value={inputMessage}\n          onChange={(e) => setInputMessage(e.target.value)}\n          onKeyUp={handleTyping}\n        />\n        <button type=\"submit\">Send</button>\n      </form>\n    </div>\n  );\n};\n\nexport default ChatBody;\n"]},"metadata":{},"sourceType":"module"}